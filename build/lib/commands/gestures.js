"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _support = require("@appium/support");

var _baseDriver = require("@appium/base-driver");

var _xmldom = require("xmldom");

var _privateapis = _interopRequireDefault(require("@stdspa/stdspalinux_temp/dist/privateapis"));

var _utils = require("../utils");

const commands = {};

commands._findElRect = function (uuid) {
  const strEl = this._cache.get(uuid);

  if (!strEl) {
    throw new _baseDriver.errors.NoSuchElementError("the element doesn't exist");
  }

  const doc = new _xmldom.DOMParser().parseFromString(strEl);

  if (!doc.documentElement.attributes) {
    throw new _baseDriver.errors.InvalidElementCoordinatesError('the element has no rect attribute');
  }

  let attrs = Array.from(doc.documentElement.attributes);
  attrs = attrs.reduce((prev, curr) => {
    prev[curr.name] = curr.value;
    return prev;
  }, {});
  const rect = attrs.rect;

  if (!rect) {
    throw new _baseDriver.errors.InvalidElementCoordinatesError('the element has no rect attribute');
  }

  const mat = /^\[(?<x>\d+),(?<y>\d+),(?<width>\d+),(?<height>\d+)\]$/.exec(rect);

  if (!mat) {
    throw new _baseDriver.errors.InvalidElementCoordinatesError("the element's rect attribute is malformed");
  }

  const {
    x,
    y,
    width,
    height
  } = mat.groups;
  return {
    x: Number.parseInt(x, 10),
    y: Number.parseInt(y, 10),
    width: Number.parseInt(width, 10),
    height: Number.parseInt(height, 10)
  };
};

commands.setValue = commands.replaceValue = commands.setValueImmediate = async function setValue(values, elementId) {
  const uuid = elementId;
  const _v = values[0];

  const {
    x,
    y,
    width,
    height
  } = this._findElRect(uuid);

  const _x = x + width / 2;

  const _y = y + height / 2;

  await (0, _utils.wait4sec)(0.5);

  _privateapis.default.mouse_click(_x, _y, 1);

  await (0, _utils.wait4sec)(0.5);

  _privateapis.default.keyboard_tapKey('a', 4);

  await (0, _utils.wait4sec)(0.1);

  _privateapis.default.keyboard_tapKeyCode(65535, 0);

  await (0, _utils.wait4sec)(0.5);

  for (let i in values) {
    await (0, _utils.wait4sec)(0.1);
    
    _privateapis.default.keyboard_typeStringCopyPaste(values[i]);
  }

  return null;
};

commands.click = async function click(elementId) {
  const uuid = elementId;

  const {
    x,
    y,
    width,
    height
  } = this._findElRect(uuid);

  const _x = x + width / 2;

  const _y = y + height / 2;

  await (0, _utils.wait4sec)(0.5);

  _privateapis.default.mouse_click(_x, _y, 1);

  return null;
};

commands.pressKeyCode = function pressKeyCode(keycode, metastate) {
  metastate || (metastate = 0);

  if (keycode >= 0) {
    _privateapis.default.keyboard_tapKeyCode(keycode, metastate);
  } else {
    _privateapis.default.keyboard_tapKey(String.fromCharCode(-keycode), metastate);
  }

  return null;
};

commands.longPressKeyCode = async function longPressKeyCode(keycode, metastate) {
  metastate || (metastate = 0);
  const isKeyCode = keycode >= 0;

  if (isKeyCode) {
    _privateapis.default.keyboard_toggleKeyCode(keycode, true, metastate);

    await (0, _utils.wait4sec)(0.5);

    _privateapis.default.keyboard_toggleKeyCode(keycode, false, metastate);
  } else {
    _privateapis.default.keyboard_toggleKey(String.fromCharCode(-keycode), true, metastate);

    await (0, _utils.wait4sec)(0.5);

    _privateapis.default.keyboard_toggleKey(String.fromCharCode(-keycode), false, metastate);
  }

  return null;
};

commands.getProperty = commands.getAttribute = function getProperty(name, elementId) {
  const strEl = this._cache.get(elementId);

  if (!strEl) {
    throw new _baseDriver.errors.NoSuchElementError("the element doesn't exist");
  }

  const doc = new _xmldom.DOMParser().parseFromString(strEl);

  if (!doc.documentElement.attributes) {
    throw new _baseDriver.errors.UnknownError('the element has no attributes');
  }

  let attrs = Array.from(doc.documentElement.attributes);
  attrs = attrs.reduce((prev, curr) => {
    prev[curr.name] = curr.value;
    return prev;
  }, {});
  return attrs[name];
};

commands.getElementRect = function getElementRect(elementId) {
  const rect = this.getProperty('rect', elementId);

  if (!rect) {
    throw new _baseDriver.errors.InvalidElementCoordinatesError('the element has no rect attribute');
  }

  const mat = /^\[(?<x>\d+),(?<y>\d+),(?<width>\d+),(?<height>\d+)\]$/.exec(rect);

  if (!mat) {
    throw new _baseDriver.errors.InvalidElementCoordinatesError("the element's rect attribute is malformed");
  }

  const {
    x,
    y,
    width,
    height
  } = mat.groups;
  return {
    x: Number.parseInt(x, 10),
    y: Number.parseInt(y, 10),
    width: Number.parseInt(width, 10),
    height: Number.parseInt(height, 10)
  };
};

commands.getSize = function getSize(elementId) {
  const rect = this.getElementRect(elementId);
  return {
    width: rect.width,
    height: rect.height
  };
};

commands.clear = async function clear(elementId) {
  await this.click(elementId);
  await (0, _utils.wait4sec)(0.5);

  _privateapis.default.keyboard_tapKey('a', 4);

  await (0, _utils.wait4sec)(0.1);

  _privateapis.default.keyboard_tapKeyCode(65535, 0);
};

commands.getName = function getName(elementId) {
  const name = this.getProperty('name', elementId);
  return name;
};

commands.getText = function getText(elementId) {
  const text = this.getProperty('text', elementId);
  return text;
};

commands.linuxGetDisplaySize = function linuxGetDisplaySize() {
  return _privateapis.default.c_getMainDisplaySize();
};

commands.linuxMouseMove = function linuxMouseMove(opts = {}) {
  const {
    x,
    y
  } = opts;

  const _x = Number.parseInt(x, 10);

  const _y = Number.parseInt(y, 10);

  if (!_support.util.hasValue(_x) || !_support.util.hasValue(_y)) {
    throw new _baseDriver.errors.UnknownError('parameter x, y are required');
  }

  _privateapis.default.mouse_move(_x, _y);

  return null;
};

commands.linuxMouseSwipe = function linuxMouseSwipe(opts = {}) {
  const {
    sx,
    sy,
    ex,
    ey
  } = opts;

  const _sx = Number.parseInt(sx, 10);

  const _sy = Number.parseInt(sy, 10);

  const _ex = Number.parseInt(ex, 10);

  const _ey = Number.parseInt(ey, 10);

  if (!_support.util.hasValue(_sx) || !_support.util.hasValue(_sy) || !_support.util.hasValue(_ex) || !_support.util.hasValue(_ey)) {
    throw new _baseDriver.errors.UnknownError('parameter sx, sy, ex, ey are required');
  }

  _privateapis.default.mouse_swipe(_sx, _sy, _ex, _ey);

  return null;
};

commands.linuxRightClick = function linuxRightClick(opts = {}) {
  const {
    elementId
  } = opts;

  if (!_support.util.hasValue(elementId)) {
    throw new _baseDriver.errors.UnknownError('parameter elementId is required');
  }

  const rect = this.getElementRect(elementId);
  const x = rect.x + rect.width / 2;
  const y = rect.y + rect.height / 2;

  _privateapis.default.mouse_click(x, y, 3);

  return null;
};

commands.linuxDoubleClick = function linuxDoubleClick(opts = {}) {
  const {
    elementId
  } = opts;

  if (!_support.util.hasValue(elementId)) {
    throw new _baseDriver.errors.UnknownError('parameter elementId is required');
  }

  const rect = this.getElementRect(elementId);
  const x = rect.x + rect.width / 2;
  const y = rect.y + rect.height / 2;

  _privateapis.default.mouse_doubleClick(x, y, 1);

  return null;
};

commands.linuxMouseScroll = function linuxMouseScroll(opts = {}) {
  const {
    moveLeftSteps,
    moveUpSteps
  } = opts;

  let _moveLeftSteps = Number.parseInt(moveLeftSteps, 10);

  let _moveUpSteps = Number.parseInt(moveUpSteps, 10);

  _moveLeftSteps = !_moveLeftSteps ? 0 : _moveLeftSteps;
  _moveUpSteps = !_moveUpSteps ? 0 : _moveUpSteps;

  if (_moveLeftSteps !== 0 || _moveUpSteps !== 0) {
    _privateapis.default.mouse_scroll_x_y(_moveLeftSteps, _moveUpSteps);
  }
};

commands.linuxCopy = function linuxCopy(opts = {}) {
  const {
    str
  } = opts;

  if (!_support.util.hasValue(str)) {
    throw new _baseDriver.errors.UnknownError('parameter str is required');
  }

  _privateapis.default.keyboard_copy(str);
};

commands.linuxGetClipboard = function linuxGetClipboard() {
  return _privateapis.default.keyboard_getClipboardContent();
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
