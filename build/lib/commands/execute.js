"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _support = require("@appium/support");

const commands = {};
const EXTENSION_COMMANDS_MAPPING = {
  shell: 'shell',
  getDisplaySize: 'linuxGetDisplaySize',
  mouseMove: 'linuxMouseMove',
  mouseSwipe: 'linuxMouseSwipe',
  rightClick: 'linuxRightClick',
  doubleClick: 'linuxDoubleClick',
  mouseScroll: 'linuxMouseScroll',
  copy: 'linuxCopy',
  getClipboard: 'linuxGetClipboard'
};

commands.execute = async function execute(script, args) {
  if (script.match(/^linux:/)) {
    _logger.default.info(`Executing extension command '${script}'`);

    script = script.replace(/^linux:/, '').trim();
    return await this.executeLinuxCommand(script, _lodash.default.isArray(args) ? args[0] : args);
  }

  throw new _baseDriver.errors.NotImplementedError();
};

commands.executeLinuxCommand = async function executeLinuxCommand(command, opts = {}) {
  if (!_lodash.default.has(EXTENSION_COMMANDS_MAPPING, command)) {
    throw new _baseDriver.errors.UnknownCommandError(`Unknown extension command "${command}". ` + `Only ${_lodash.default.keys(EXTENSION_COMMANDS_MAPPING)} commands are supported.`);
  }

  return await this[EXTENSION_COMMANDS_MAPPING[command]](opts);
};

commands.shell = async function shell(opts = {}) {
  const {
    cmd
  } = opts;

  if (!_support.util.hasValue(cmd)) {
    throw new _baseDriver.errors.UnknownError("parameter cmd is required");
  }

  try {
    const result = await (0, _utils.executeCommand)(cmd);
    return result;
  } catch (err) {
    throw new _baseDriver.errors.UnknownError(err.message);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkciLCJzaGVsbCIsImdldERpc3BsYXlTaXplIiwibW91c2VNb3ZlIiwibW91c2VTd2lwZSIsInJpZ2h0Q2xpY2siLCJkb3VibGVDbGljayIsIm1vdXNlU2Nyb2xsIiwiY29weSIsImdldENsaXBib2FyZCIsImV4ZWN1dGUiLCJzY3JpcHQiLCJhcmdzIiwibWF0Y2giLCJsb2ciLCJpbmZvIiwicmVwbGFjZSIsInRyaW0iLCJleGVjdXRlTGludXhDb21tYW5kIiwiXyIsImlzQXJyYXkiLCJlcnJvcnMiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiY29tbWFuZCIsIm9wdHMiLCJoYXMiLCJVbmtub3duQ29tbWFuZEVycm9yIiwia2V5cyIsImNtZCIsInV0aWwiLCJoYXNWYWx1ZSIsIlVua25vd25FcnJvciIsInJlc3VsdCIsImVyciIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsUUFBUSxHQUFHLEVBQWpCO0FBRUEsTUFBTUMsMEJBQTBCLEdBQUc7QUFDakNDLEVBQUFBLEtBQUssRUFBRyxPQUR5QjtBQUVqQ0MsRUFBQUEsY0FBYyxFQUFFLHFCQUZpQjtBQUdqQ0MsRUFBQUEsU0FBUyxFQUFFLGdCQUhzQjtBQUlqQ0MsRUFBQUEsVUFBVSxFQUFFLGlCQUpxQjtBQUtqQ0MsRUFBQUEsVUFBVSxFQUFFLGlCQUxxQjtBQU1qQ0MsRUFBQUEsV0FBVyxFQUFFLGtCQU5vQjtBQU9qQ0MsRUFBQUEsV0FBVyxFQUFFLGtCQVBvQjtBQVFqQ0MsRUFBQUEsSUFBSSxFQUFFLFdBUjJCO0FBU2pDQyxFQUFBQSxZQUFZLEVBQUU7QUFUbUIsQ0FBbkM7O0FBWUFWLFFBQVEsQ0FBQ1csT0FBVCxHQUFtQixlQUFlQSxPQUFmLENBQXdCQyxNQUF4QixFQUFnQ0MsSUFBaEMsRUFBc0M7QUFDdkQsTUFBSUQsTUFBTSxDQUFDRSxLQUFQLENBQWEsU0FBYixDQUFKLEVBQTZCO0FBQzNCQyxvQkFBSUMsSUFBSixDQUFVLGdDQUErQkosTUFBTyxHQUFoRDs7QUFDQUEsSUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNLLE9BQVAsQ0FBZSxTQUFmLEVBQTBCLEVBQTFCLEVBQThCQyxJQUE5QixFQUFUO0FBQ0EsV0FBTyxNQUFNLEtBQUtDLG1CQUFMLENBQXlCUCxNQUF6QixFQUFpQ1EsZ0JBQUVDLE9BQUYsQ0FBVVIsSUFBVixJQUFrQkEsSUFBSSxDQUFDLENBQUQsQ0FBdEIsR0FBNEJBLElBQTdELENBQWI7QUFDRDs7QUFDRCxRQUFNLElBQUlTLG1CQUFPQyxtQkFBWCxFQUFOO0FBQ0QsQ0FQRDs7QUFTQXZCLFFBQVEsQ0FBQ21CLG1CQUFULEdBQStCLGVBQWVBLG1CQUFmLENBQW9DSyxPQUFwQyxFQUE2Q0MsSUFBSSxHQUFHLEVBQXBELEVBQXdEO0FBQ3JGLE1BQUksQ0FBQ0wsZ0JBQUVNLEdBQUYsQ0FBTXpCLDBCQUFOLEVBQWtDdUIsT0FBbEMsQ0FBTCxFQUFpRDtBQUMvQyxVQUFNLElBQUlGLG1CQUFPSyxtQkFBWCxDQUFnQyw4QkFBNkJILE9BQVEsS0FBdEMsR0FDbEMsUUFBT0osZ0JBQUVRLElBQUYsQ0FBTzNCLDBCQUFQLENBQW1DLDBCQUR2QyxDQUFOO0FBRUQ7O0FBQ0QsU0FBTyxNQUFNLEtBQUtBLDBCQUEwQixDQUFDdUIsT0FBRCxDQUEvQixFQUEwQ0MsSUFBMUMsQ0FBYjtBQUNELENBTkQ7O0FBUUF6QixRQUFRLENBQUNFLEtBQVQsR0FBaUIsZUFBZUEsS0FBZixDQUFzQnVCLElBQUksR0FBRyxFQUE3QixFQUFpQztBQUNoRCxRQUFNO0FBQUNJLElBQUFBO0FBQUQsTUFBUUosSUFBZDs7QUFDQSxNQUFJLENBQUNLLGNBQUtDLFFBQUwsQ0FBY0YsR0FBZCxDQUFMLEVBQXlCO0FBQ3ZCLFVBQU0sSUFBSVAsbUJBQU9VLFlBQVgsQ0FBd0IsMkJBQXhCLENBQU47QUFDRDs7QUFDRCxNQUFJO0FBQ0YsVUFBTUMsTUFBTSxHQUFHLE1BQU0sMkJBQWVKLEdBQWYsQ0FBckI7QUFDQSxXQUFPSSxNQUFQO0FBQ0QsR0FIRCxDQUdFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLFVBQU0sSUFBSVosbUJBQU9VLFlBQVgsQ0FBd0JFLEdBQUcsQ0FBQ0MsT0FBNUIsQ0FBTjtBQUNEO0FBQ0YsQ0FYRDs7ZUFhZW5DLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBleGVjdXRlQ29tbWFuZCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG5jb25zdCBFWFRFTlNJT05fQ09NTUFORFNfTUFQUElORyA9IHtcbiAgc2hlbGw6ICAnc2hlbGwnLFxuICBnZXREaXNwbGF5U2l6ZTogJ2xpbnV4R2V0RGlzcGxheVNpemUnLFxuICBtb3VzZU1vdmU6ICdsaW51eE1vdXNlTW92ZScsXG4gIG1vdXNlU3dpcGU6ICdsaW51eE1vdXNlU3dpcGUnLFxuICByaWdodENsaWNrOiAnbGludXhSaWdodENsaWNrJyxcbiAgZG91YmxlQ2xpY2s6ICdsaW51eERvdWJsZUNsaWNrJyxcbiAgbW91c2VTY3JvbGw6ICdsaW51eE1vdXNlU2Nyb2xsJyxcbiAgY29weTogJ2xpbnV4Q29weScsXG4gIGdldENsaXBib2FyZDogJ2xpbnV4R2V0Q2xpcGJvYXJkJ1xufTtcblxuY29tbWFuZHMuZXhlY3V0ZSA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGUgKHNjcmlwdCwgYXJncykge1xuICBpZiAoc2NyaXB0Lm1hdGNoKC9ebGludXg6LykpIHtcbiAgICBsb2cuaW5mbyhgRXhlY3V0aW5nIGV4dGVuc2lvbiBjb21tYW5kICcke3NjcmlwdH0nYCk7XG4gICAgc2NyaXB0ID0gc2NyaXB0LnJlcGxhY2UoL15saW51eDovLCAnJykudHJpbSgpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVMaW51eENvbW1hbmQoc2NyaXB0LCBfLmlzQXJyYXkoYXJncykgPyBhcmdzWzBdIDogYXJncyk7XG4gIH1cbiAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG59O1xuXG5jb21tYW5kcy5leGVjdXRlTGludXhDb21tYW5kID0gYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUxpbnV4Q29tbWFuZCAoY29tbWFuZCwgb3B0cyA9IHt9KSB7XG4gIGlmICghXy5oYXMoRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkcsIGNvbW1hbmQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duQ29tbWFuZEVycm9yKGBVbmtub3duIGV4dGVuc2lvbiBjb21tYW5kIFwiJHtjb21tYW5kfVwiLiBgICtcbiAgICAgIGBPbmx5ICR7Xy5rZXlzKEVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HKX0gY29tbWFuZHMgYXJlIHN1cHBvcnRlZC5gKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpc1tFWFRFTlNJT05fQ09NTUFORFNfTUFQUElOR1tjb21tYW5kXV0ob3B0cyk7XG59O1xuXG5jb21tYW5kcy5zaGVsbCA9IGFzeW5jIGZ1bmN0aW9uIHNoZWxsIChvcHRzID0ge30pIHtcbiAgY29uc3Qge2NtZH0gPSBvcHRzO1xuICBpZiAoIXV0aWwuaGFzVmFsdWUoY21kKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yKFwicGFyYW1ldGVyIGNtZCBpcyByZXF1aXJlZFwiKTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV4ZWN1dGVDb21tYW5kKGNtZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoZXJyLm1lc3NhZ2UpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2V4ZWN1dGUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
