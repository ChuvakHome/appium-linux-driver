"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

var _logger = _interopRequireDefault(require("../logger"));

const commands = {};
const EXTENSION_COMMANDS_MAPPING = {
  source: 'atspiSource',
  shell: 'shell'
};

commands.execute = async function execute(script, args) {
  if (script.match(/^linux:/)) {
    _logger.default.info(`Executing extension command '${script}'`);

    script = script.replace(/^linux:/, '').trim();
    return await this.executeLinuxCommand(script, _lodash.default.isArray(args) ? args[0] : args);
  }

  throw new _baseDriver.errors.NotImplementedError();
};

commands.executeLinuxCommand = async function executeLinuxCommand(command, opts = {}) {
  if (!_lodash.default.has(EXTENSION_COMMANDS_MAPPING, command)) {
    throw new _baseDriver.errors.UnknownCommandError(`Unknown extension command "${command}". ` + `Only ${_lodash.default.keys(EXTENSION_COMMANDS_MAPPING)} commands are supported.`);
  }

  return await this[EXTENSION_COMMANDS_MAPPING[command]](opts);
};

commands.atspiSource = async function atspiSource(opts = {}) {
  return `<application></application>`;
};

commands.shell = async function shell(cmd) {
  console.log('shell success');
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkciLCJzb3VyY2UiLCJzaGVsbCIsImV4ZWN1dGUiLCJzY3JpcHQiLCJhcmdzIiwibWF0Y2giLCJsb2ciLCJpbmZvIiwicmVwbGFjZSIsInRyaW0iLCJleGVjdXRlTGludXhDb21tYW5kIiwiXyIsImlzQXJyYXkiLCJlcnJvcnMiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiY29tbWFuZCIsIm9wdHMiLCJoYXMiLCJVbmtub3duQ29tbWFuZEVycm9yIiwia2V5cyIsImF0c3BpU291cmNlIiwiY21kIiwiY29uc29sZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7QUFFQSxNQUFNQywwQkFBMEIsR0FBRztBQUNqQ0MsRUFBQUEsTUFBTSxFQUFFLGFBRHlCO0FBRWpDQyxFQUFBQSxLQUFLLEVBQUc7QUFGeUIsQ0FBbkM7O0FBS0FILFFBQVEsQ0FBQ0ksT0FBVCxHQUFtQixlQUFlQSxPQUFmLENBQXdCQyxNQUF4QixFQUFnQ0MsSUFBaEMsRUFBc0M7QUFDdkQsTUFBSUQsTUFBTSxDQUFDRSxLQUFQLENBQWEsU0FBYixDQUFKLEVBQTZCO0FBQzNCQyxvQkFBSUMsSUFBSixDQUFVLGdDQUErQkosTUFBTyxHQUFoRDs7QUFDQUEsSUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNLLE9BQVAsQ0FBZSxTQUFmLEVBQTBCLEVBQTFCLEVBQThCQyxJQUE5QixFQUFUO0FBQ0EsV0FBTyxNQUFNLEtBQUtDLG1CQUFMLENBQXlCUCxNQUF6QixFQUFpQ1EsZ0JBQUVDLE9BQUYsQ0FBVVIsSUFBVixJQUFrQkEsSUFBSSxDQUFDLENBQUQsQ0FBdEIsR0FBNEJBLElBQTdELENBQWI7QUFDRDs7QUFDRCxRQUFNLElBQUlTLG1CQUFPQyxtQkFBWCxFQUFOO0FBQ0QsQ0FQRDs7QUFTQWhCLFFBQVEsQ0FBQ1ksbUJBQVQsR0FBK0IsZUFBZUEsbUJBQWYsQ0FBb0NLLE9BQXBDLEVBQTZDQyxJQUFJLEdBQUcsRUFBcEQsRUFBd0Q7QUFDckYsTUFBSSxDQUFDTCxnQkFBRU0sR0FBRixDQUFNbEIsMEJBQU4sRUFBa0NnQixPQUFsQyxDQUFMLEVBQWlEO0FBQy9DLFVBQU0sSUFBSUYsbUJBQU9LLG1CQUFYLENBQWdDLDhCQUE2QkgsT0FBUSxLQUF0QyxHQUNsQyxRQUFPSixnQkFBRVEsSUFBRixDQUFPcEIsMEJBQVAsQ0FBbUMsMEJBRHZDLENBQU47QUFFRDs7QUFDRCxTQUFPLE1BQU0sS0FBS0EsMEJBQTBCLENBQUNnQixPQUFELENBQS9CLEVBQTBDQyxJQUExQyxDQUFiO0FBQ0QsQ0FORDs7QUFRQWxCLFFBQVEsQ0FBQ3NCLFdBQVQsR0FBdUIsZUFBZUEsV0FBZixDQUE0QkosSUFBSSxHQUFHLEVBQW5DLEVBQXVDO0FBQzVELFNBQVEsNkJBQVI7QUFDRCxDQUZEOztBQUlBbEIsUUFBUSxDQUFDRyxLQUFULEdBQWlCLGVBQWVBLEtBQWYsQ0FBc0JvQixHQUF0QixFQUEyQjtBQUMxQ0MsRUFBQUEsT0FBTyxDQUFDaEIsR0FBUixDQUFZLGVBQVo7QUFDRCxDQUZEOztlQUllUixRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ0BhcHBpdW0vYmFzZS1kcml2ZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG5jb25zdCBFWFRFTlNJT05fQ09NTUFORFNfTUFQUElORyA9IHtcbiAgc291cmNlOiAnYXRzcGlTb3VyY2UnLFxuICBzaGVsbDogICdzaGVsbCdcbn07XG5cbmNvbW1hbmRzLmV4ZWN1dGUgPSBhc3luYyBmdW5jdGlvbiBleGVjdXRlIChzY3JpcHQsIGFyZ3MpIHtcbiAgaWYgKHNjcmlwdC5tYXRjaCgvXmxpbnV4Oi8pKSB7XG4gICAgbG9nLmluZm8oYEV4ZWN1dGluZyBleHRlbnNpb24gY29tbWFuZCAnJHtzY3JpcHR9J2ApO1xuICAgIHNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKC9ebGludXg6LywgJycpLnRyaW0oKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlTGludXhDb21tYW5kKHNjcmlwdCwgXy5pc0FycmF5KGFyZ3MpID8gYXJnc1swXSA6IGFyZ3MpO1xuICB9XG4gIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xufTtcblxuY29tbWFuZHMuZXhlY3V0ZUxpbnV4Q29tbWFuZCA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVMaW51eENvbW1hbmQgKGNvbW1hbmQsIG9wdHMgPSB7fSkge1xuICBpZiAoIV8uaGFzKEVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HLCBjb21tYW5kKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkNvbW1hbmRFcnJvcihgVW5rbm93biBleHRlbnNpb24gY29tbWFuZCBcIiR7Y29tbWFuZH1cIi4gYCArXG4gICAgICBgT25seSAke18ua2V5cyhFWFRFTlNJT05fQ09NTUFORFNfTUFQUElORyl9IGNvbW1hbmRzIGFyZSBzdXBwb3J0ZWQuYCk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXNbRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkdbY29tbWFuZF1dKG9wdHMpO1xufTtcblxuY29tbWFuZHMuYXRzcGlTb3VyY2UgPSBhc3luYyBmdW5jdGlvbiBhdHNwaVNvdXJjZSAob3B0cyA9IHt9KSB7XG4gIHJldHVybiBgPGFwcGxpY2F0aW9uPjwvYXBwbGljYXRpb24+YDtcbn07XG5cbmNvbW1hbmRzLnNoZWxsID0gYXN5bmMgZnVuY3Rpb24gc2hlbGwgKGNtZCkge1xuICBjb25zb2xlLmxvZygnc2hlbGwgc3VjY2VzcycpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
