"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _privateapis = _interopRequireDefault(require("@stdspa/stdspalinux_temp/dist/privateapis"));

var _xpath = _interopRequireDefault(require("xpath.js"));

var _xmldom = require("xmldom");

var _baseDriver = require("@appium/base-driver");

const commands = {};

commands.getWindowHandle = function getWindowHandle() {
  var _this$_win;

  return (_this$_win = this._win) === null || _this$_win === void 0 ? void 0 : _this$_win.wid;
};

commands.getWindowHandles = function getWindowHandles() {
  const appName = this.appName;

  const pids = _privateapis.default.app_running(appName);

  if (!pids || pids.length === 0) {
    throw new _baseDriver.errors.NoSuchWindowError(`application ${appName} is not running`);
  }

  const winHierachy = _privateapis.default.app_getWindowHierachy();

  const doc = new _xmldom.DOMParser().parseFromString(winHierachy);
  let xpath = pids.map(pid => `@pid="${pid}"`).join(' or ');
  xpath = `//*[${xpath} and @InputOutput="true"]`;
  const nodes = (0, _xpath.default)(doc, xpath);

  if (!nodes || nodes.length === 0) {
    return [];
  }

  let _nodes = [];

  for (const node of nodes) {
    if (!node.attributes) {
      continue;
    }

    const _node = {};
    const attrs = Array.from(node.attributes);

    for (const attr of attrs) {
      if (attr.name === 'class') {
        _node.class = attr.value.split(' ');
      } else if (attr.name === 'name') {
        _node.name = attr.value;
      } else if (attr.name === 'pid') {
        _node.pid = Number.parseInt(attr.value, 10);
      } else if (attr.name === 'wid') {
        _node.wid = Number.parseInt(attr.value, 10);
      }
    }

    _nodes.push(_node);
  }

  _nodes = _nodes.filter(p => (p.class || p.name) && p.pid && p.wid);

  if (_nodes.length === 0) {
    return [];
  }

  _nodes = _nodes.map(p => {
    let _node = {
      pid: p.pid,
      wid: p.wid,
      names: []
    };

    if (p.name) {
      _node.names.push(p.name);
    }

    if (p.class) {
      _node.names.push(...p.class);
    }

    return _node;
  });
  const wids = [];

  for (const _node of _nodes) {
    let ok = false;

    for (const name of _node.names) {
      if (_privateapis.default.a11y_checkWindowExists(name, _node.pid)) {
        ok = true;
        break;
      }
    }

    if (ok) {
      wids.push(_node.wid);
    }
  }

  return wids;
};

commands._getWinAndPid_FromWinName = function (windowName) {
  const pids = _privateapis.default.app_running(this.appName);

  if (!pids || pids.length === 0) {
    throw new _baseDriver.errors.NoSuchWindowError(`application ${this.appName} is not running`);
  }

  const winHierachy = _privateapis.default.app_getWindowHierachy();

  const doc = new _xmldom.DOMParser().parseFromString(winHierachy);
  let xpath = pids.map(pid => `@pid="${pid}"`).join(' or ');
  xpath = `//*[(${xpath}) and @InputOutput="true" and (@name="${windowName}" or contains(concat(" ", @class, " "), "${' ' + windowName + ' '}"))]`;
  const nodes = (0, _xpath.default)(doc, xpath);

  if (!nodes || nodes.length === 0) {
    throw new _baseDriver.errors.NoSuchWindowError(`the window ${windowName} doesn't present`);
  }

  let _nodes = [];

  for (const node of nodes) {
    if (!node.attributes) {
      continue;
    }

    const attrs = Array.from(node.attributes);
    const _node = {};

    for (const attr of attrs) {
      _node[attr.name] = attr.value;
    }

    _nodes.push(_node);
  }

  _nodes = _nodes.filter(p => (p.name || p.class) && p.pid && p.wid);

  if (_nodes.length === 0) {
    throw new _baseDriver.errors.NoSuchWindowError(`the window ${windowName} doesn't present`);
  }

  _nodes.sort((a, b) => {
    const av = a.name === windowName ? -1 : 1;
    const bv = b.name === windowName ? -1 : 1;
    return av - bv;
  });

  for (const _node of _nodes) {
    const _pid = Number.parseInt(_node.pid, 10);

    if (_privateapis.default.a11y_checkWindowExists(windowName, _pid)) {
      return {
        pid: _pid,
        wid: Number.parseInt(_node.wid, 10),
        name: windowName
      };
    }
  }

  throw new _baseDriver.errors.NoSuchWindowError(`the window ${windowName} doesn't present`);
};

commands._getWinAndPid_FromWinId = function (wid) {
  const winHierachy = _privateapis.default.app_getWindowHierachy();

  const doc = new _xmldom.DOMParser().parseFromString(winHierachy);
  const xpath = `//*[@wid="${wid}" and @InputOutput="true"]`;
  const nodes = (0, _xpath.default)(doc, xpath);

  if (!nodes || nodes.length === 0) {
    throw new _baseDriver.errors.NoSuchWindowError(`the window wid=${wid} doesn't present`);
  }

  let node = nodes[0];
  const attrs = Array.from(node.attributes);
  const _node = {};

  for (const attr of attrs) {
    _node[attr.name] = attr.value;
  }

  node = _node;

  if (!node.name || !node.pid || !node.wid) {
    throw new _baseDriver.errors.NoSuchWindowError(`the window wid=${wid} doesn't present`);
  }

  if (!_privateapis.default.a11y_checkWindowExists(node.name, Number.parseInt(node.pid, 10))) {
    throw new _baseDriver.errors.NoSuchWindowError(`the window wid=${wid} doesn't present`);
  }

  return {
    pid: Number.parseInt(node.pid, 10),
    wid: Number.parseInt(node.wid, 10),
    name: node.name
  };
};

function validateName(name) {
  if (!name) {
    return name;
  }

  for (let i = 0; i < name.length; ++i) {
    if (name[i] < '0' || name[i] > '9') {
      return name;
    }
  }

  return null;
}

function validateHandle(handle) {
  if (!handle) {
    return handle;
  }

  for (let i = 0; i < handle.length; ++i) {
    if (handle[i] < '0' || handle[i] > '9') {
      return null;
    }
  }

  return handle;
}

commands.setWindow = function setWindow(name, handle) {
  handle = validateHandle(handle);
  name = validateName(name);

  if (name) {
    const win = this._getWinAndPid_FromWinName(name);

    this._win = win;
  } else if (handle) {
    const win = this._getWinAndPid_FromWinId(handle);

    this._win = win;
  } else {
    throw new _baseDriver.errors.UnknownError("setWindow both name and handle don't have a value");
  }
};

commands.getWindowRect = function getWindowRect() {
  const win = this._win;

  if (!win) {
    throw new _baseDriver.errors.NoSuchWindowError(`window is not specified`);
  }

  const {
    wid
  } = win;
  return _privateapis.default.app_getWinRect(wid);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
