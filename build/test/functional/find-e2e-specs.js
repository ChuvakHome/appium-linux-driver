"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _webdriverio = require("webdriverio");

var _server = require("../../lib/server");

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _chai = _interopRequireDefault(require("chai"));

var _utils = require("../utils");

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

const CAPS = {
  platformName: 'linux',
  'appium:appName': _utils.APP_NAME
};
describe('AtSpi2Driver - find elements', function () {
  this.timeout(_utils.MOCHA_TIMEOUT);
  let server;
  let driver;
  before(async function () {
    server = await (0, _server.startServer)(_utils.PORT, _utils.HOST);
  });
  after(async function () {
    if (server) {
      await server.close();
      server = null;
    }
  });
  beforeEach(async function () {
    driver = await (0, _webdriverio.remote)({
      hostname: _utils.HOST,
      port: _utils.PORT,
      capabilities: CAPS
    });
  });
  afterEach(async function () {
    if (driver) {
      try {
        await driver.deleteSession();
      } finally {
        driver = null;
      }
    }
  });
  it('should find by name', async function () {
    const el = await driver.findElement('name', 'Find');
    el.should.exist;
  });
  it('should find multiple by name', async function () {
    const els = await driver.findElements('name', 'Find');
    els.length.should.eql(1);
    await driver.getElementAttribute(els[0].ELEMENT, 'name').should.eventually.eql('Find');
  });
  it('should find by xpath', async function () {
    const el = await driver.findElement('xpath', '//toggle-button[@name="Find"]');
    el.should.exist;
  });
  it('should find multiple by xpath', async function () {
    const els = await driver.findElements('xpath', '//toggle-button[@name="Find"]');
    els.length.should.eql(1);
    await driver.getElementAttribute(els[0].ELEMENT, 'name').should.eventually.eql('Find');
  });
  it('should find subelements', async function () {
    const el = await driver.findElement('xpath', '//document-web');
    el.should.exist;
    const subEls = await driver.findElementsFromElement(el.ELEMENT, 'xpath', '//image[@name="Ubuntu Logo"]');
    subEls.length.should.eql(1);
    await driver.getElementAttribute(subEls[0].ELEMENT, 'tag').should.eventually.eql('img');
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9maW5kLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwic2hvdWxkIiwidXNlIiwiY2hhaUFzUHJvbWlzZWQiLCJDQVBTIiwicGxhdGZvcm1OYW1lIiwiQVBQX05BTUUiLCJkZXNjcmliZSIsInRpbWVvdXQiLCJNT0NIQV9USU1FT1VUIiwic2VydmVyIiwiZHJpdmVyIiwiYmVmb3JlIiwiUE9SVCIsIkhPU1QiLCJhZnRlciIsImNsb3NlIiwiYmVmb3JlRWFjaCIsImhvc3RuYW1lIiwicG9ydCIsImNhcGFiaWxpdGllcyIsImFmdGVyRWFjaCIsImRlbGV0ZVNlc3Npb24iLCJpdCIsImVsIiwiZmluZEVsZW1lbnQiLCJleGlzdCIsImVscyIsImZpbmRFbGVtZW50cyIsImxlbmd0aCIsImVxbCIsImdldEVsZW1lbnRBdHRyaWJ1dGUiLCJFTEVNRU5UIiwiZXZlbnR1YWxseSIsInN1YkVscyIsImZpbmRFbGVtZW50c0Zyb21FbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsY0FBS0MsTUFBTDs7QUFDQUQsY0FBS0UsR0FBTCxDQUFTQyx1QkFBVDs7QUFFQSxNQUFNQyxJQUFJLEdBQUc7QUFDWEMsRUFBQUEsWUFBWSxFQUFFLE9BREg7QUFFWCxvQkFBa0JDO0FBRlAsQ0FBYjtBQUtBQyxRQUFRLENBQUMsOEJBQUQsRUFBaUMsWUFBWTtBQUNuRCxPQUFLQyxPQUFMLENBQWFDLG9CQUFiO0FBRUEsTUFBSUMsTUFBSjtBQUNBLE1BQUlDLE1BQUo7QUFDQUMsRUFBQUEsTUFBTSxDQUFDLGtCQUFrQjtBQUN2QkYsSUFBQUEsTUFBTSxHQUFHLE1BQU0seUJBQVlHLFdBQVosRUFBa0JDLFdBQWxCLENBQWY7QUFDRCxHQUZLLENBQU47QUFHQUMsRUFBQUEsS0FBSyxDQUFDLGtCQUFrQjtBQUN0QixRQUFJTCxNQUFKLEVBQVk7QUFDVixZQUFNQSxNQUFNLENBQUNNLEtBQVAs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QyxLQUE5QyxFQUFxRC9CLE1BQXJELENBQTREZ0MsVUFBNUQsQ0FBdUVILEdBQXZFLENBQTJFLEtBQTNFLENBQU47QUFDRCxHQU5DLENBQUY7QUFRRCxDQW5FTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gJ3dlYmRyaXZlcmlvJztcbmltcG9ydCB7IHN0YXJ0U2VydmVyIH0gZnJvbSAnLi4vLi4vbGliL3NlcnZlcic7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCB7IEhPU1QsIFBPUlQsIE1PQ0hBX1RJTUVPVVQsIEFQUF9OQU1FIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5jb25zdCBDQVBTID0ge1xuICBwbGF0Zm9ybU5hbWU6ICdsaW51eCcsXG4gICdhcHBpdW06YXBwTmFtZSc6IEFQUF9OQU1FXG59O1xuXG5kZXNjcmliZSgnQXRTcGkyRHJpdmVyIC0gZmluZCBlbGVtZW50cycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KE1PQ0hBX1RJTUVPVVQpO1xuXG4gIGxldCBzZXJ2ZXI7XG4gIGxldCBkcml2ZXI7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgc2VydmVyID0gYXdhaXQgc3RhcnRTZXJ2ZXIoUE9SVCwgSE9TVCk7XG4gIH0pO1xuICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNlcnZlcikge1xuICAgICAgYXdhaXQgc2VydmVyLmNsb3NlKCk7XG4gICAgICBzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfSk7XG4gIGJlZm9yZUVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGRyaXZlciA9IGF3YWl0IHJlbW90ZSh7XG4gICAgICBob3N0bmFtZTogSE9TVCxcbiAgICAgIHBvcnQ6IFBPUlQsXG4gICAgICBjYXBhYmlsaXRpZXM6IENBUFMsXG4gICAgfSk7XG4gIH0pO1xuICBhZnRlckVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGlmIChkcml2ZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkcml2ZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmaW5kIGJ5IG5hbWUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ25hbWUnLCAnRmluZCcpO1xuICAgIGVsLnNob3VsZC5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmaW5kIG11bHRpcGxlIGJ5IG5hbWUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWxzID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50cygnbmFtZScsICdGaW5kJyk7XG4gICAgZWxzLmxlbmd0aC5zaG91bGQuZXFsKDEpO1xuICAgIGF3YWl0IGRyaXZlci5nZXRFbGVtZW50QXR0cmlidXRlKGVsc1swXS5FTEVNRU5ULCAnbmFtZScpLnNob3VsZC5ldmVudHVhbGx5LmVxbCgnRmluZCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGZpbmQgYnkgeHBhdGgnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoXG4gICAgICAneHBhdGgnLFxuICAgICAgJy8vdG9nZ2xlLWJ1dHRvbltAbmFtZT1cIkZpbmRcIl0nXG4gICAgKTtcbiAgICBlbC5zaG91bGQuZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZmluZCBtdWx0aXBsZSBieSB4cGF0aCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBlbHMgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnRzKFxuICAgICAgJ3hwYXRoJyxcbiAgICAgICcvL3RvZ2dsZS1idXR0b25bQG5hbWU9XCJGaW5kXCJdJ1xuICAgICk7XG4gICAgZWxzLmxlbmd0aC5zaG91bGQuZXFsKDEpO1xuICAgIGF3YWl0IGRyaXZlci5nZXRFbGVtZW50QXR0cmlidXRlKGVsc1swXS5FTEVNRU5ULCAnbmFtZScpLnNob3VsZC5ldmVudHVhbGx5LmVxbCgnRmluZCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGZpbmQgc3ViZWxlbWVudHMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ3hwYXRoJywgJy8vZG9jdW1lbnQtd2ViJyk7XG4gICAgZWwuc2hvdWxkLmV4aXN0O1xuICAgIGNvbnN0IHN1YkVscyA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudHNGcm9tRWxlbWVudChlbC5FTEVNRU5ULCAneHBhdGgnLCAnLy9pbWFnZVtAbmFtZT1cIlVidW50dSBMb2dvXCJdJyk7XG4gICAgc3ViRWxzLmxlbmd0aC5zaG91bGQuZXFsKDEpO1xuICAgIGF3YWl0IGRyaXZlci5nZXRFbGVtZW50QXR0cmlidXRlKHN1YkVsc1swXS5FTEVNRU5ULCAndGFnJykuc2hvdWxkLmV2ZW50dWFsbHkuZXFsKCdpbWcnKTtcbiAgfSk7XG5cbn0pO1xuXG4iXSwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9maW5kLWUyZS1zcGVjcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
