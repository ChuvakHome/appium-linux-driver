"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _webdriverio = require("webdriverio");

var _server = require("../../lib/server");

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _chai = _interopRequireDefault(require("chai"));

var _utils = require("../utils");

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

const CAPS = {
  platformName: 'linux',
  'appium:appName': _utils.APP_NAME
};
describe('AtSpi2Driver - elements interaction', function () {
  this.timeout(_utils.MOCHA_TIMEOUT);
  let server;
  let driver;
  before(async function () {
    server = await (0, _server.startServer)(_utils.PORT, _utils.HOST);
  });
  after(async function () {
    if (server) {
      await server.close();
      server = null;
    }
  });
  beforeEach(async function () {
    driver = await (0, _webdriverio.remote)({
      hostname: _utils.HOST,
      port: _utils.PORT,
      capabilities: CAPS
    });
  });
  afterEach(async function () {
    if (driver) {
      try {
        await driver.deleteSession();
      } finally {
        driver = null;
      }
    }
  });
  it('should set a text to a text view', async function () {
    const el = await driver.findElement('name', 'Find');
    await driver.executeScript('linux: click', [el.ELEMENT]);
    const txtEl = await driver.findElement('xpath', '(//text[@name="Search"])[1]');
    await driver.executeScript('linux: click', [txtEl.ELEMENT]);
    await driver.elementSendKeys(txtEl.ELEMENT, ['hello world']);
    await driver.getElementText(txtEl.ELEMENT).should.eventually.eql('hello world');
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9pbnRlcmFjdGlvbi1lMmUtc3BlY3MuanMiXSwibmFtZXMiOlsiY2hhaSIsInNob3VsZCIsInVzZSIsImNoYWlBc1Byb21pc2VkIiwiQ0FQUyIsInBsYXRmb3JtTmFtZSIsIkFQUF9OQU1FIiwiZGVzY3JpYmUiLCJ0aW1lb3V0IiwiTU9DSEFfVElNRU9VVCIsInNlcnZlciIsImRyaXZlciIsImJlZm9yZSIsIlBPUlQiLCJIT1NUIiwiYWZ0ZXIiLCJjbG9zZSIsImJlZm9yZUVhY2giLCJob3N0bmFtZSIsInBvcnQiLCJjYXBhYmlsaXRpZXMiLCJhZnRlckVhY2giLCJkZWxldGVTZXNzaW9uIiwiaXQiLCJlbCIsImZpbmRFbGVtZW50IiwiZXhlY3V0ZVNjcmlwdCIsIkVMRU1FTlQiLCJ0eHRFbCIsImVsZW1lbnRTZW5kS2V5cyIsImdldEVsZW1lbnRUZXh0IiwiZXZlbnR1YWxseSIsImVxbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUFBLGNBQUtDLE1BQUw7O0FBQ0FELGNBQUtFLEdBQUwsQ0FBU0MsdUJBQVQ7O0FBRUEsTUFBTUMsSUFBSSxHQUFHO0FBQ1hDLEVBQUFBLFlBQVksRUFBRSxPQURIO0FBRVgsb0JBQWtCQztBQUZQLENBQWI7QUFLQUMsUUFBUSxDQUFDLHFDQUFELEVBQXdDLFlBQVk7QUFDMUQsT0FBS0MsT0FBTCxDQUFhQyxvQkFBYjtBQUVBLE1BQUlDLE1BQUo7QUFDQSxNQUFJQyxNQUFKO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQyxrQkFBa0I7QUFDdkJGLElBQUFBLE1BQU0sR0FBRyxNQUFNLHlCQUFZRyxXQUFaLEVBQWtCQyxXQUFsQixDQUFmO0FBQ0QsR0FGSyxDQUFOO0FBR0FDLEVBQUFBLEtBQUssQ0FBQyxrQkFBa0I7QUFDdEIsUUFBSUwsTUFBSixFQUFZO0FBQ1YsWUFBTUEsTUFBTSxDQUFDTSxLQUFQLEVBQU47QUFDQU4sTUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDRDtBQUNGLEdBTEksQ0FBTDtBQU1BTyxFQUFBQSxVQUFVLENBQUMsa0JBQWtCO0FBQzNCTixJQUFBQSxNQUFNLEdBQUcsTUFBTSx5QkFBTztBQUNwQk8sTUFBQUEsUUFBUSxFQUFFSixXQURVO0FBRXBCSyxNQUFBQSxJQUFJLEVBQUVOLFdBRmM7QUFHcEJPLE1BQUFBLFlBQVksRUFBRWhCO0FBSE0sS0FBUCxDQUFmO0FBS0QsR0FOUyxDQUFWO0FBT0FpQixFQUFBQSxTQUFTLENBQUMsa0JBQWtCO0FBQzFCLFFBQUlWLE1BQUosRUFBWTtBQUNWLFVBQUk7QUFDRixjQUFNQSxNQUFNLENBQUNXLGFBQVAsRUFBTjtBQUNELE9BRkQsU0FFVTtBQUNSWCxRQUFBQSxNQUFNLEdBQUcsSUFBVDtBQUNEO0FBQ0Y7QUFDRixHQVJRLENBQVQ7QUFVQVksRUFBQUEsRUFBRSxDQUFDLGtDQUFELEVBQXFDLGtCQUFrQjtBQUN2RCxVQUFNQyxFQUFFLEdBQUcsTUFBTWIsTUFBTSxDQUFDYyxXQUFQLENBQW1CLE1BQW5CLEVBQTJCLE1BQTNCLENBQWpCO0FBQ0EsVUFBTWQsTUFBTSxDQUFDZSxhQUFQLENBQXFCLGNBQXJCLEVBQXFDLENBQUNGLEVBQUUsQ0FBQ0csT0FBSixDQUFyQyxDQUFOO0FBQ0EsVUFBTUMsS0FBSyxHQUFHLE1BQU1qQixNQUFNLENBQUNjLFdBQVAsQ0FBbUIsT0FBbkIsRUFBNEIsNkJBQTVCLENBQXBCO0FBQ0EsVUFBTWQsTUFBTSxDQUFDZSxhQUFQLENBQXFCLGNBQXJCLEVBQXFDLENBQUNFLEtBQUssQ0FBQ0QsT0FBUCxDQUFyQyxDQUFOO0FBQ0EsVUFBTWhCLE1BQU0sQ0FBQ2tCLGVBQVAsQ0FBdUJELEtBQUssQ0FBQ0QsT0FBN0IsRUFBc0MsQ0FBQyxhQUFELENBQXRDLENBQU47QUFDQSxVQUFNaEIsTUFBTSxDQUFDbUIsY0FBUCxDQUFzQkYsS0FBSyxDQUFDRCxPQUE1QixFQUFxQzFCLE1BQXJDLENBQTRDOEIsVUFBNUMsQ0FBdURDLEdBQXZELENBQTJELGFBQTNELENBQU47QUFDRCxHQVBDLENBQUY7QUF1REQsQ0F0Rk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyByZW1vdGUgfSBmcm9tICd3ZWJkcml2ZXJpbyc7XG5pbXBvcnQgeyBzdGFydFNlcnZlciB9IGZyb20gJy4uLy4uL2xpYi9zZXJ2ZXInO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBIT1NULCBQT1JULCBNT0NIQV9USU1FT1VULCBBUFBfTkFNRSB9IGZyb20gJy4uL3V0aWxzJztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuY29uc3QgQ0FQUyA9IHtcbiAgcGxhdGZvcm1OYW1lOiAnbGludXgnLFxuICAnYXBwaXVtOmFwcE5hbWUnOiBBUFBfTkFNRVxufTtcblxuZGVzY3JpYmUoJ0F0U3BpMkRyaXZlciAtIGVsZW1lbnRzIGludGVyYWN0aW9uJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnRpbWVvdXQoTU9DSEFfVElNRU9VVCk7XG5cbiAgbGV0IHNlcnZlcjtcbiAgbGV0IGRyaXZlcjtcbiAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBzZXJ2ZXIgPSBhd2FpdCBzdGFydFNlcnZlcihQT1JULCBIT1NUKTtcbiAgfSk7XG4gIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2VydmVyKSB7XG4gICAgICBhd2FpdCBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgIHNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9KTtcbiAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgZHJpdmVyID0gYXdhaXQgcmVtb3RlKHtcbiAgICAgIGhvc3RuYW1lOiBIT1NULFxuICAgICAgcG9ydDogUE9SVCxcbiAgICAgIGNhcGFiaWxpdGllczogQ0FQUyxcbiAgICB9KTtcbiAgfSk7XG4gIGFmdGVyRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRyaXZlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGRyaXZlciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpdCgnc2hvdWxkIHNldCBhIHRleHQgdG8gYSB0ZXh0IHZpZXcnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ25hbWUnLCAnRmluZCcpO1xuICAgIGF3YWl0IGRyaXZlci5leGVjdXRlU2NyaXB0KCdsaW51eDogY2xpY2snLCBbZWwuRUxFTUVOVF0pO1xuICAgIGNvbnN0IHR4dEVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCd4cGF0aCcsICcoLy90ZXh0W0BuYW1lPVwiU2VhcmNoXCJdKVsxXScpO1xuICAgIGF3YWl0IGRyaXZlci5leGVjdXRlU2NyaXB0KCdsaW51eDogY2xpY2snLCBbdHh0RWwuRUxFTUVOVF0pO1xuICAgIGF3YWl0IGRyaXZlci5lbGVtZW50U2VuZEtleXModHh0RWwuRUxFTUVOVCwgWydoZWxsbyB3b3JsZCddKTtcbiAgICBhd2FpdCBkcml2ZXIuZ2V0RWxlbWVudFRleHQodHh0RWwuRUxFTUVOVCkuc2hvdWxkLmV2ZW50dWFsbHkuZXFsKCdoZWxsbyB3b3JsZCcpO1xuICB9KTtcblxuICAvLyBpdCgnc2hvdWxkIGNsaWNrIGEgYnV0dG9uIGJ5IGFic29sdXRlIGNvb3JkaW5hdGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIC8vICAgY29uc3QgZWwgPSBfLmZpcnN0KGF3YWl0IGRyaXZlci5maW5kRWxlbWVudHMoJy1pb3MgcHJlZGljYXRlIHN0cmluZycsICdlbGVtZW50VHlwZSA9PSAxMiBBTkQgbGFiZWwgPT0gXCJib2xkXCInKSk7XG4gIC8vICAgY29uc3Qge3gsIHksIHdpZHRoLCBoZWlnaHR9ID0gYXdhaXQgZHJpdmVyLmdldEVsZW1lbnRBdHRyaWJ1dGUoZWwsICdmcmFtZScpO1xuICAvLyAgIGF3YWl0IGRyaXZlci5leGVjdXRlU2NyaXB0KCdtYWNvczogY2xpY2snLCB7XG4gIC8vICAgICB4OiB4ICsgd2lkdGggLyAyLFxuICAvLyAgICAgeTogeSArIGhlaWdodCAvIDIsXG4gIC8vICAgfSk7XG4gIC8vICAgY29uc3QgZWxzID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50cygnLWlvcyBwcmVkaWNhdGUgc3RyaW5nJywgJ3ZhbHVlID09IFwiQm9sZFwiIEFORCBsYWJlbCA9PSBcInR5cGUgZmFjZVwiJyk7XG4gIC8vICAgZWxzLmxlbmd0aC5zaG91bGQuZXFsKDEpO1xuICAvLyB9KTtcblxuICAvLyBpdCgnc2hvdWxkIGNsZWFyIGEgdGV4dCB2aWV3JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvLyAgIGNvbnN0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZVRleHRWaWV3Jyk7XG4gIC8vICAgYXdhaXQgZHJpdmVyLmVsZW1lbnRTZW5kS2V5cyhlbCwgJ2hlbGxvIHdvcmxkJyk7XG4gIC8vICAgYXdhaXQgZHJpdmVyLmdldEVsZW1lbnRUZXh0KGVsKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJ2hlbGxvIHdvcmxkJyk7XG4gIC8vICAgYXdhaXQgZHJpdmVyLmVsZW1lbnRDbGVhcihlbCk7XG4gIC8vICAgYXdhaXQgZHJpdmVyLmdldEVsZW1lbnRUZXh0KGVsKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJycpO1xuICAvLyB9KTtcblxuICAvLyBpdCgnc2hvdWxkIHNlbmQga2V5cyB3aXRoIG1vZGlmaWVycyBpbnRvIGEgdGV4dCB2aWV3JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvLyAgIGNvbnN0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZVRleHRWaWV3Jyk7XG4gIC8vICAgYXdhaXQgZHJpdmVyLmVsZW1lbnRDbGljayhlbCk7XG4gIC8vICAgY29uc3QgZmxhZ3NTaGlmdCA9IDEgPDwgMTtcbiAgLy8gICBhd2FpdCBkcml2ZXIuZXhlY3V0ZVNjcmlwdCgnbWFjb3M6IGtleXMnLCB7XG4gIC8vICAgICBrZXlzOiBbe1xuICAvLyAgICAgICBrZXk6ICdoJyxcbiAgLy8gICAgICAgbW9kaWZpZXJGbGFnczogZmxhZ3NTaGlmdCxcbiAgLy8gICAgIH0sIHtcbiAgLy8gICAgICAga2V5OiAnaScsXG4gIC8vICAgICAgIG1vZGlmaWVyRmxhZ3M6IGZsYWdzU2hpZnQsXG4gIC8vICAgICB9XVxuICAvLyAgIH0pO1xuICAvLyAgIGF3YWl0IGRyaXZlci5nZXRFbGVtZW50VGV4dChlbCkuc2hvdWxkLmV2ZW50dWFsbHkuZXFsKCdISScpO1xuICAvLyB9KTtcblxuICAvLyBpdCgnc2hvdWxkIG9wZW4gY29udGV4dCBtZW51IGlmIGxlZnQgY2xpY2sgd2l0aCBDdHJsIGRlcHJlc3NlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgLy8gICBjb25zdCBlbCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgnY2xhc3MgbmFtZScsICdYQ1VJRWxlbWVudFR5cGVUZXh0VmlldycpO1xuICAvLyAgIGNvbnN0IGZsYWdzQ3RybCA9IDEgPDwgMjtcbiAgLy8gICBhd2FpdCBkcml2ZXIuZXhlY3V0ZVNjcmlwdCgnbWFjb3M6IGNsaWNrJywge1xuICAvLyAgICAgZWxlbWVudElkOiBlbCxcbiAgLy8gICAgIGtleU1vZGlmaWVyRmxhZ3M6IGZsYWdzQ3RybCxcbiAgLy8gICB9KTtcbiAgLy8gICBjb25zdCBlbHMgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnRzKCctaW9zIHByZWRpY2F0ZSBzdHJpbmcnLCBgdGl0bGUgPT0gJ0ltcG9ydCBJbWFnZSdgKTtcbiAgLy8gICBlbHMubGVuZ3RoLnNob3VsZC5iZS5hYm92ZSgxKTtcbiAgLy8gfSk7XG5cbn0pO1xuIl0sImZpbGUiOiJ0ZXN0L2Z1bmN0aW9uYWwvaW50ZXJhY3Rpb24tZTJlLXNwZWNzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
