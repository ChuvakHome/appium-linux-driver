"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _support = require("@appium/support");

var _baseDriver = require("@appium/base-driver");

var _xpath = _interopRequireDefault(require("xpath.js"));

var _xmldom = require("xmldom");

var _privateapis = _interopRequireDefault(require("@stdspa/stdspalinux_temp/dist/privateapis"));

var _utils = require("../utils");

const commands = {};

function extractUuid(options = {}, keyNames = ['element-6066-11e4-a52e-4f735466cecf', 'element']) {
  for (const name of keyNames) {
    if (options[name]) {
      const result = _support.util.unwrapElement(options[name]);

      if (result) {
        return result;
      }
    }
  }

  return null;
}

function requireUuid(options = {}, keyNames = ['element-6066-11e4-a52e-4f735466cecf', 'element']) {
  const result = extractUuid(options, keyNames);

  if (!result) {
    throw new _baseDriver.errors.InvalidArgumentError(`${keyNames[0]} field is mandatory`);
  }

  return result;
}

commands._findElRect = function (uuid) {
  var _attrs$find;

  const strEl = this._cache.get(uuid);

  const doc = new _xmldom.DOMParser().parseFromString(strEl);

  if (!doc.attributes) {
    throw new _baseDriver.errors.UnknownError("the element has no rect attribute");
  }

  const attrs = Array.from(doc.attributes);
  const rect = (_attrs$find = attrs.find(p => p.name = 'rect')) === null || _attrs$find === void 0 ? void 0 : _attrs$find.value;

  if (!rect) {
    throw new _baseDriver.errors.UnknownError("the element has no rect attribute");
  }

  const mat = /^\[(?<x>\d+)\,(?<y>\d+)\,(?<width>\d+)\,(?<height>\d+)\]$/.exec(rect);

  if (!mat) {
    throw new _baseDriver.errors.UnknownError("the element's rect attribute is malformed");
  }

  const {
    x,
    y,
    width,
    height
  } = mat.groups;
  return {
    x: Number.parseInt(x),
    y: Number.parseInt(y),
    width: Number.parseInt(width),
    height: Number.parseInt(height)
  };
};

commands.setValue = async function setValue(opts = {}) {
  const uuid = requireUuid(opts);
  const {
    value,
    text
  } = opts;

  const _v = _support.util.hasValue(value) ? value : _support.util.hasValue(text) ? text : null;

  const {
    x,
    y,
    width,
    height
  } = this._findElRect(uuid);

  const _x = x + width / 2;

  const _y = y + height / 2;

  await (0, _utils.wait4sec)(0.5);

  _privateapis.default.mouse_click(_x, _y, 1);

  await (0, _utils.wait4sec)(0.5);

  _privateapis.default.keyboard_typeStringCopyPaste(_v);

  return null;
};

commands.setValueImmediate = async function setValueImmediate(opts = {}) {
  const uuid = requireUuid(opts);
  const {
    value,
    text
  } = opts;

  const _v = _support.util.hasValue(value) ? value : _support.util.hasValue(text) ? text : null;

  const {
    x,
    y,
    width,
    height
  } = this._findElRect(uuid);

  const _x = x + width / 2;

  const _y = y + height / 2;

  await (0, _utils.wait4sec)(0.5);

  _privateapis.default.mouse_click(_x, _y, 1);

  await (0, _utils.wait4sec)(0.5);

  _privateapis.default.keyboard_typeStringCopyPaste(_v);

  return null;
};

commands.click = async function click(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  return null;
};

commands.scroll = async function scroll(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    deltaX,
    deltaY,
    keyModifierFlags
  } = opts;
  return null;
};

commands.swipe = async function swipe(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    direction,
    velocity,
    keyModifierFlags
  } = opts;
  return null;
};

commands.rightClick = async function rightClick(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  return null;
};

commands.hover = async function hover(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  return null;
};

commands.doubleClick = async function doubleClick(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  return null;
};

commands.keys = async function keys(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    keys
  } = opts;
  return null;
};

commands.pressKeyCode = async function pressKeyCode(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    keycode,
    flags
  } = opts;
  return null;
};

commands.longPressKeyCode = async function longPressKeyCode(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    keycode,
    flags
  } = opts;
  return null;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
