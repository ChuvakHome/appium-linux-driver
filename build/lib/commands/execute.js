"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _support = require("@appium/support");

const commands = {};
const EXTENSION_COMMANDS_MAPPING = {
  shell: 'shell',
  getDisplaySize: 'linuxGetDisplaySize',
  mouseMove: 'linuxMouseMove',
  mouseSwipe: 'linuxMouseSwipe',
  rightClick: 'linuxRightClick',
  doubleClick: 'linuxDoubleClick',
  mouseScroll: 'linuxMouseScroll',
  copy: 'linuxCopy',
  getClipboard: 'linuxGetClipboard',
  click: 'click'
};

commands.execute = async function execute(script, args) {
  if (script.match(/^linux:/)) {
    _logger.default.info(`Executing extension command '${script}'`);

    script = script.replace(/^linux:/, '').trim();
    return await this.executeLinuxCommand(script, _lodash.default.isArray(args) ? args[0] : args);
  }

  throw new _baseDriver.errors.NotImplementedError();
};

commands.executeLinuxCommand = async function executeLinuxCommand(command, opts = {}) {
  if (!_lodash.default.has(EXTENSION_COMMANDS_MAPPING, command)) {
    throw new _baseDriver.errors.UnknownCommandError(`Unknown extension command "${command}". ` + `Only ${_lodash.default.keys(EXTENSION_COMMANDS_MAPPING)} commands are supported.`);
  }

  return await this[EXTENSION_COMMANDS_MAPPING[command]](opts);
};

commands.shell = async function shell(opts = {}) {
  const {
    cmd
  } = opts;

  if (!_support.util.hasValue(cmd)) {
    throw new _baseDriver.errors.UnknownError('parameter cmd is required');
  }

  try {
    const result = await (0, _utils.executeCommand)(cmd);
    return result;
  } catch (err) {
    throw new _baseDriver.errors.UnknownError(err.message);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkciLCJzaGVsbCIsImdldERpc3BsYXlTaXplIiwibW91c2VNb3ZlIiwibW91c2VTd2lwZSIsInJpZ2h0Q2xpY2siLCJkb3VibGVDbGljayIsIm1vdXNlU2Nyb2xsIiwiY29weSIsImdldENsaXBib2FyZCIsImNsaWNrIiwiZXhlY3V0ZSIsInNjcmlwdCIsImFyZ3MiLCJtYXRjaCIsImxvZyIsImluZm8iLCJyZXBsYWNlIiwidHJpbSIsImV4ZWN1dGVMaW51eENvbW1hbmQiLCJfIiwiaXNBcnJheSIsImVycm9ycyIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJjb21tYW5kIiwib3B0cyIsImhhcyIsIlVua25vd25Db21tYW5kRXJyb3IiLCJrZXlzIiwiY21kIiwidXRpbCIsImhhc1ZhbHVlIiwiVW5rbm93bkVycm9yIiwicmVzdWx0IiwiZXJyIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7QUFFQSxNQUFNQywwQkFBMEIsR0FBRztBQUNqQ0MsRUFBQUEsS0FBSyxFQUFFLE9BRDBCO0FBRWpDQyxFQUFBQSxjQUFjLEVBQUUscUJBRmlCO0FBR2pDQyxFQUFBQSxTQUFTLEVBQUUsZ0JBSHNCO0FBSWpDQyxFQUFBQSxVQUFVLEVBQUUsaUJBSnFCO0FBS2pDQyxFQUFBQSxVQUFVLEVBQUUsaUJBTHFCO0FBTWpDQyxFQUFBQSxXQUFXLEVBQUUsa0JBTm9CO0FBT2pDQyxFQUFBQSxXQUFXLEVBQUUsa0JBUG9CO0FBUWpDQyxFQUFBQSxJQUFJLEVBQUUsV0FSMkI7QUFTakNDLEVBQUFBLFlBQVksRUFBRSxtQkFUbUI7QUFVakNDLEVBQUFBLEtBQUssRUFBRTtBQVYwQixDQUFuQzs7QUFhQVgsUUFBUSxDQUFDWSxPQUFULEdBQW1CLGVBQWVBLE9BQWYsQ0FBd0JDLE1BQXhCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUN2RCxNQUFJRCxNQUFNLENBQUNFLEtBQVAsQ0FBYSxTQUFiLENBQUosRUFBNkI7QUFDM0JDLG9CQUFJQyxJQUFKLENBQVUsZ0NBQStCSixNQUFPLEdBQWhEOztBQUNBQSxJQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0ssT0FBUCxDQUFlLFNBQWYsRUFBMEIsRUFBMUIsRUFBOEJDLElBQTlCLEVBQVQ7QUFDQSxXQUFPLE1BQU0sS0FBS0MsbUJBQUwsQ0FBeUJQLE1BQXpCLEVBQWlDUSxnQkFBRUMsT0FBRixDQUFVUixJQUFWLElBQWtCQSxJQUFJLENBQUMsQ0FBRCxDQUF0QixHQUE0QkEsSUFBN0QsQ0FBYjtBQUNEOztBQUNELFFBQU0sSUFBSVMsbUJBQU9DLG1CQUFYLEVBQU47QUFDRCxDQVBEOztBQVNBeEIsUUFBUSxDQUFDb0IsbUJBQVQsR0FBK0IsZUFBZUEsbUJBQWYsQ0FBb0NLLE9BQXBDLEVBQTZDQyxJQUFJLEdBQUcsRUFBcEQsRUFBd0Q7QUFDckYsTUFBSSxDQUFDTCxnQkFBRU0sR0FBRixDQUFNMUIsMEJBQU4sRUFBa0N3QixPQUFsQyxDQUFMLEVBQWlEO0FBQy9DLFVBQU0sSUFBSUYsbUJBQU9LLG1CQUFYLENBQWdDLDhCQUE2QkgsT0FBUSxLQUF0QyxHQUNsQyxRQUFPSixnQkFBRVEsSUFBRixDQUFPNUIsMEJBQVAsQ0FBbUMsMEJBRHZDLENBQU47QUFFRDs7QUFDRCxTQUFPLE1BQU0sS0FBS0EsMEJBQTBCLENBQUN3QixPQUFELENBQS9CLEVBQTBDQyxJQUExQyxDQUFiO0FBQ0QsQ0FORDs7QUFRQTFCLFFBQVEsQ0FBQ0UsS0FBVCxHQUFpQixlQUFlQSxLQUFmLENBQXNCd0IsSUFBSSxHQUFHLEVBQTdCLEVBQWlDO0FBQ2hELFFBQU07QUFBQ0ksSUFBQUE7QUFBRCxNQUFRSixJQUFkOztBQUNBLE1BQUksQ0FBQ0ssY0FBS0MsUUFBTCxDQUFjRixHQUFkLENBQUwsRUFBeUI7QUFDdkIsVUFBTSxJQUFJUCxtQkFBT1UsWUFBWCxDQUF3QiwyQkFBeEIsQ0FBTjtBQUNEOztBQUNELE1BQUk7QUFDRixVQUFNQyxNQUFNLEdBQUcsTUFBTSwyQkFBZUosR0FBZixDQUFyQjtBQUNBLFdBQU9JLE1BQVA7QUFDRCxHQUhELENBR0UsT0FBT0MsR0FBUCxFQUFZO0FBQ1osVUFBTSxJQUFJWixtQkFBT1UsWUFBWCxDQUF3QkUsR0FBRyxDQUFDQyxPQUE1QixDQUFOO0FBQ0Q7QUFDRixDQVhEOztlQWFlcEMsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGV4ZWN1dGVDb21tYW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmNvbnN0IEVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HID0ge1xuICBzaGVsbDogJ3NoZWxsJyxcbiAgZ2V0RGlzcGxheVNpemU6ICdsaW51eEdldERpc3BsYXlTaXplJyxcbiAgbW91c2VNb3ZlOiAnbGludXhNb3VzZU1vdmUnLFxuICBtb3VzZVN3aXBlOiAnbGludXhNb3VzZVN3aXBlJyxcbiAgcmlnaHRDbGljazogJ2xpbnV4UmlnaHRDbGljaycsXG4gIGRvdWJsZUNsaWNrOiAnbGludXhEb3VibGVDbGljaycsXG4gIG1vdXNlU2Nyb2xsOiAnbGludXhNb3VzZVNjcm9sbCcsXG4gIGNvcHk6ICdsaW51eENvcHknLFxuICBnZXRDbGlwYm9hcmQ6ICdsaW51eEdldENsaXBib2FyZCcsXG4gIGNsaWNrOiAnY2xpY2snXG59O1xuXG5jb21tYW5kcy5leGVjdXRlID0gYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZSAoc2NyaXB0LCBhcmdzKSB7XG4gIGlmIChzY3JpcHQubWF0Y2goL15saW51eDovKSkge1xuICAgIGxvZy5pbmZvKGBFeGVjdXRpbmcgZXh0ZW5zaW9uIGNvbW1hbmQgJyR7c2NyaXB0fSdgKTtcbiAgICBzY3JpcHQgPSBzY3JpcHQucmVwbGFjZSgvXmxpbnV4Oi8sICcnKS50cmltKCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUxpbnV4Q29tbWFuZChzY3JpcHQsIF8uaXNBcnJheShhcmdzKSA/IGFyZ3NbMF0gOiBhcmdzKTtcbiAgfVxuICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbn07XG5cbmNvbW1hbmRzLmV4ZWN1dGVMaW51eENvbW1hbmQgPSBhc3luYyBmdW5jdGlvbiBleGVjdXRlTGludXhDb21tYW5kIChjb21tYW5kLCBvcHRzID0ge30pIHtcbiAgaWYgKCFfLmhhcyhFWFRFTlNJT05fQ09NTUFORFNfTUFQUElORywgY29tbWFuZCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoYFVua25vd24gZXh0ZW5zaW9uIGNvbW1hbmQgXCIke2NvbW1hbmR9XCIuIGAgK1xuICAgICAgYE9ubHkgJHtfLmtleXMoRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkcpfSBjb21tYW5kcyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzW0VYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HW2NvbW1hbmRdXShvcHRzKTtcbn07XG5cbmNvbW1hbmRzLnNoZWxsID0gYXN5bmMgZnVuY3Rpb24gc2hlbGwgKG9wdHMgPSB7fSkge1xuICBjb25zdCB7Y21kfSA9IG9wdHM7XG4gIGlmICghdXRpbC5oYXNWYWx1ZShjbWQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoJ3BhcmFtZXRlciBjbWQgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV4ZWN1dGVDb21tYW5kKGNtZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoZXJyLm1lc3NhZ2UpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2V4ZWN1dGUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
