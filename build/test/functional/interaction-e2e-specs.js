"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _webdriverio = require("webdriverio");

var _server = require("../../lib/server");

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _chai = _interopRequireDefault(require("chai"));

var _utils = require("../utils");

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

const CAPS = {
  platformName: 'Linux',
  automationName: 'atspi2',
  appName: _utils.APP_NAME
};
describe('AtSpi2Driver - elements interaction', function () {
  this.timeout(_utils.MOCHA_TIMEOUT);
  let server;
  let driver;
  before(async function () {
    server = await (0, _server.startServer)(_utils.PORT, _utils.HOST);
  });
  after(async function () {
    if (server) {
      await server.close();
      server = null;
    }
  });
  beforeEach(async function () {
    driver = await (0, _webdriverio.remote)({
      hostname: _utils.HOST,
      port: _utils.PORT,
      capabilities: CAPS
    });
  });
  afterEach(async function () {
    if (driver) {
      try {
        await driver.deleteSession();
      } finally {
        driver = null;
      }
    }
  });
  it('should set a text to a text view', async function () {
    const el = await driver.findElement('name', 'Find');
    await el.click();
    const txtEl = await driver.findElement('xpath', '(//text[@name="Search"])[1]');
    await txtEl.click();
    await driver.elementSendKeys(txtEl, 'hello world');
    await driver.getElementText(txtEl).should.eventually.eql('hello world');
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9pbnRlcmFjdGlvbi1lMmUtc3BlY3MuanMiXSwibmFtZXMiOlsiY2hhaSIsInNob3VsZCIsInVzZSIsImNoYWlBc1Byb21pc2VkIiwiQ0FQUyIsInBsYXRmb3JtTmFtZSIsImF1dG9tYXRpb25OYW1lIiwiYXBwTmFtZSIsIkFQUF9OQU1FIiwiZGVzY3JpYmUiLCJ0aW1lb3V0IiwiTU9DSEFfVElNRU9VVCIsInNlcnZlciIsImRyaXZlciIsImJlZm9yZSIsIlBPUlQiLCJIT1NUIiwiYWZ0ZXIiLCJjbG9zZSIsImJlZm9yZUVhY2giLCJob3N0bmFtZSIsInBvcnQiLCJjYXBhYmlsaXRpZXMiLCJhZnRlckVhY2giLCJkZWxldGVTZXNzaW9uIiwiaXQiLCJlbCIsImZpbmRFbGVtZW50IiwiY2xpY2siLCJ0eHRFbCIsImVsZW1lbnRTZW5kS2V5cyIsImdldEVsZW1lbnRUZXh0IiwiZXZlbnR1YWxseSIsImVxbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUFBLGNBQUtDLE1BQUw7O0FBQ0FELGNBQUtFLEdBQUwsQ0FBU0MsdUJBQVQ7O0FBRUEsTUFBTUMsSUFBSSxHQUFHO0FBQ1hDLEVBQUFBLFlBQVksRUFBRSxPQURIO0FBRVhDLEVBQUFBLGNBQWMsRUFBRSxRQUZMO0FBR1hDLEVBQUFBLE9BQU8sRUFBRUM7QUFIRSxDQUFiO0FBTUFDLFFBQVEsQ0FBQyxxQ0FBRCxFQUF3QyxZQUFZO0FBQzFELE9BQUtDLE9BQUwsQ0FBYUMsb0JBQWI7QUFFQSxNQUFJQyxNQUFKO0FBQ0EsTUFBSUMsTUFBSjtBQUNBQyxFQUFBQSxNQUFNLENBQUMsa0JBQWtCO0FBQ3ZCRixJQUFBQSxNQUFNLEdBQUcsTUFBTSx5QkFBWUcsV0FBWixFQUFrQkMsV0FBbEIsQ0FBZjtBQUNELEdBRkssQ0FBTjtBQUdBQyxFQUFBQSxLQUFLLENBQUMsa0JBQWtCO0FBQ3RCLFFBQUlMLE1BQUosRUFBWTtBQUNWLFlBQU1BLE1BQU0sQ0FBQ00sS0FBUCxFQUFOO0FBQ0FOLE1BQUFBLE1BQU0sR0FBRyxJQUFUO0FBQ0Q7QUFDRixHQUxJLENBQUw7QUFNQU8sRUFBQUEsVUFBVSxDQUFDLGtCQUFrQjtBQUMzQk4sSUFBQUEsTUFBTSxHQUFHLE1BQU0seUJBQU87QUFDcEJPLE1BQUFBLFFBQVEsRUFBRUosV0FEVTtBQUVwQkssTUFBQUEsSUFBSSxFQUFFTixXQUZjO0FBR3BCTyxNQUFBQSxZQUFZLEVBQUVsQjtBQUhNLEtBQVAsQ0FBZjtBQUtELEdBTlMsQ0FBVjtBQU9BbUIsRUFBQUEsU0FBUyxDQUFDLGtCQUFrQjtBQUMxQixRQUFJVixNQUFKLEVBQVk7QUFDVixVQUFJO0FBQ0YsY0FBTUEsTUFBTSxDQUFDVyxhQUFQLEVBQU47QUFDRCxPQUZELFNBRVU7QUFDUlgsUUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDRDtBQUNGO0FBQ0YsR0FSUSxDQUFUO0FBVUFZLEVBQUFBLEVBQUUsQ0FBQyxrQ0FBRCxFQUFxQyxrQkFBa0I7QUFDdkQsVUFBTUMsRUFBRSxHQUFHLE1BQU1iLE1BQU0sQ0FBQ2MsV0FBUCxDQUFtQixNQUFuQixFQUEyQixNQUEzQixDQUFqQjtBQUNBLFVBQU1ELEVBQUUsQ0FBQ0UsS0FBSCxFQUFOO0FBQ0EsVUFBTUMsS0FBSyxHQUFHLE1BQU1oQixNQUFNLENBQUNjLFdBQVAsQ0FBbUIsT0FBbkIsRUFBNEIsNkJBQTVCLENBQXBCO0FBQ0EsVUFBTUUsS0FBSyxDQUFDRCxLQUFOLEVBQU47QUFDQSxVQUFNZixNQUFNLENBQUNpQixlQUFQLENBQXVCRCxLQUF2QixFQUE4QixhQUE5QixDQUFOO0FBQ0EsVUFBTWhCLE1BQU0sQ0FBQ2tCLGNBQVAsQ0FBc0JGLEtBQXRCLEVBQTZCNUIsTUFBN0IsQ0FBb0MrQixVQUFwQyxDQUErQ0MsR0FBL0MsQ0FBbUQsYUFBbkQsQ0FBTjtBQUNELEdBUEMsQ0FBRjtBQXVERCxDQXRGTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gJ3dlYmRyaXZlcmlvJztcbmltcG9ydCB7IHN0YXJ0U2VydmVyIH0gZnJvbSAnLi4vLi4vbGliL3NlcnZlcic7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCB7IEhPU1QsIFBPUlQsIE1PQ0hBX1RJTUVPVVQsIEFQUF9OQU1FIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5jb25zdCBDQVBTID0ge1xuICBwbGF0Zm9ybU5hbWU6ICdMaW51eCcsXG4gIGF1dG9tYXRpb25OYW1lOiAnYXRzcGkyJyxcbiAgYXBwTmFtZTogQVBQX05BTUVcbn07XG5cbmRlc2NyaWJlKCdBdFNwaTJEcml2ZXIgLSBlbGVtZW50cyBpbnRlcmFjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KE1PQ0hBX1RJTUVPVVQpO1xuXG4gIGxldCBzZXJ2ZXI7XG4gIGxldCBkcml2ZXI7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgc2VydmVyID0gYXdhaXQgc3RhcnRTZXJ2ZXIoUE9SVCwgSE9TVCk7XG4gIH0pO1xuICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNlcnZlcikge1xuICAgICAgYXdhaXQgc2VydmVyLmNsb3NlKCk7XG4gICAgICBzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfSk7XG4gIGJlZm9yZUVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGRyaXZlciA9IGF3YWl0IHJlbW90ZSh7XG4gICAgICBob3N0bmFtZTogSE9TVCxcbiAgICAgIHBvcnQ6IFBPUlQsXG4gICAgICBjYXBhYmlsaXRpZXM6IENBUFMsXG4gICAgfSk7XG4gIH0pO1xuICBhZnRlckVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGlmIChkcml2ZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkcml2ZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZXQgYSB0ZXh0IHRvIGEgdGV4dCB2aWV3JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCduYW1lJywgJ0ZpbmQnKTtcbiAgICBhd2FpdCBlbC5jbGljaygpO1xuICAgIGNvbnN0IHR4dEVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCd4cGF0aCcsICcoLy90ZXh0W0BuYW1lPVwiU2VhcmNoXCJdKVsxXScpO1xuICAgIGF3YWl0IHR4dEVsLmNsaWNrKCk7XG4gICAgYXdhaXQgZHJpdmVyLmVsZW1lbnRTZW5kS2V5cyh0eHRFbCwgJ2hlbGxvIHdvcmxkJyk7XG4gICAgYXdhaXQgZHJpdmVyLmdldEVsZW1lbnRUZXh0KHR4dEVsKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJ2hlbGxvIHdvcmxkJyk7XG4gIH0pO1xuXG4gIC8vIGl0KCdzaG91bGQgY2xpY2sgYSBidXR0b24gYnkgYWJzb2x1dGUgY29vcmRpbmF0ZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgLy8gICBjb25zdCBlbCA9IF8uZmlyc3QoYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50cygnLWlvcyBwcmVkaWNhdGUgc3RyaW5nJywgJ2VsZW1lbnRUeXBlID09IDEyIEFORCBsYWJlbCA9PSBcImJvbGRcIicpKTtcbiAgLy8gICBjb25zdCB7eCwgeSwgd2lkdGgsIGhlaWdodH0gPSBhd2FpdCBkcml2ZXIuZ2V0RWxlbWVudEF0dHJpYnV0ZShlbCwgJ2ZyYW1lJyk7XG4gIC8vICAgYXdhaXQgZHJpdmVyLmV4ZWN1dGVTY3JpcHQoJ21hY29zOiBjbGljaycsIHtcbiAgLy8gICAgIHg6IHggKyB3aWR0aCAvIDIsXG4gIC8vICAgICB5OiB5ICsgaGVpZ2h0IC8gMixcbiAgLy8gICB9KTtcbiAgLy8gICBjb25zdCBlbHMgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnRzKCctaW9zIHByZWRpY2F0ZSBzdHJpbmcnLCAndmFsdWUgPT0gXCJCb2xkXCIgQU5EIGxhYmVsID09IFwidHlwZSBmYWNlXCInKTtcbiAgLy8gICBlbHMubGVuZ3RoLnNob3VsZC5lcWwoMSk7XG4gIC8vIH0pO1xuXG4gIC8vIGl0KCdzaG91bGQgY2xlYXIgYSB0ZXh0IHZpZXcnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIC8vICAgY29uc3QgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ2NsYXNzIG5hbWUnLCAnWENVSUVsZW1lbnRUeXBlVGV4dFZpZXcnKTtcbiAgLy8gICBhd2FpdCBkcml2ZXIuZWxlbWVudFNlbmRLZXlzKGVsLCAnaGVsbG8gd29ybGQnKTtcbiAgLy8gICBhd2FpdCBkcml2ZXIuZ2V0RWxlbWVudFRleHQoZWwpLnNob3VsZC5ldmVudHVhbGx5LmVxbCgnaGVsbG8gd29ybGQnKTtcbiAgLy8gICBhd2FpdCBkcml2ZXIuZWxlbWVudENsZWFyKGVsKTtcbiAgLy8gICBhd2FpdCBkcml2ZXIuZ2V0RWxlbWVudFRleHQoZWwpLnNob3VsZC5ldmVudHVhbGx5LmVxbCgnJyk7XG4gIC8vIH0pO1xuXG4gIC8vIGl0KCdzaG91bGQgc2VuZCBrZXlzIHdpdGggbW9kaWZpZXJzIGludG8gYSB0ZXh0IHZpZXcnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIC8vICAgY29uc3QgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ2NsYXNzIG5hbWUnLCAnWENVSUVsZW1lbnRUeXBlVGV4dFZpZXcnKTtcbiAgLy8gICBhd2FpdCBkcml2ZXIuZWxlbWVudENsaWNrKGVsKTtcbiAgLy8gICBjb25zdCBmbGFnc1NoaWZ0ID0gMSA8PCAxO1xuICAvLyAgIGF3YWl0IGRyaXZlci5leGVjdXRlU2NyaXB0KCdtYWNvczoga2V5cycsIHtcbiAgLy8gICAgIGtleXM6IFt7XG4gIC8vICAgICAgIGtleTogJ2gnLFxuICAvLyAgICAgICBtb2RpZmllckZsYWdzOiBmbGFnc1NoaWZ0LFxuICAvLyAgICAgfSwge1xuICAvLyAgICAgICBrZXk6ICdpJyxcbiAgLy8gICAgICAgbW9kaWZpZXJGbGFnczogZmxhZ3NTaGlmdCxcbiAgLy8gICAgIH1dXG4gIC8vICAgfSk7XG4gIC8vICAgYXdhaXQgZHJpdmVyLmdldEVsZW1lbnRUZXh0KGVsKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJ0hJJyk7XG4gIC8vIH0pO1xuXG4gIC8vIGl0KCdzaG91bGQgb3BlbiBjb250ZXh0IG1lbnUgaWYgbGVmdCBjbGljayB3aXRoIEN0cmwgZGVwcmVzc2VkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvLyAgIGNvbnN0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZVRleHRWaWV3Jyk7XG4gIC8vICAgY29uc3QgZmxhZ3NDdHJsID0gMSA8PCAyO1xuICAvLyAgIGF3YWl0IGRyaXZlci5leGVjdXRlU2NyaXB0KCdtYWNvczogY2xpY2snLCB7XG4gIC8vICAgICBlbGVtZW50SWQ6IGVsLFxuICAvLyAgICAga2V5TW9kaWZpZXJGbGFnczogZmxhZ3NDdHJsLFxuICAvLyAgIH0pO1xuICAvLyAgIGNvbnN0IGVscyA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudHMoJy1pb3MgcHJlZGljYXRlIHN0cmluZycsIGB0aXRsZSA9PSAnSW1wb3J0IEltYWdlJ2ApO1xuICAvLyAgIGVscy5sZW5ndGguc2hvdWxkLmJlLmFib3ZlKDEpO1xuICAvLyB9KTtcblxufSk7XG4iXSwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9pbnRlcmFjdGlvbi1lMmUtc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
