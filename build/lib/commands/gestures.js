"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _support = require("@appium/support");

var _baseDriver = require("@appium/base-driver");

const commands = {};

function extractUuid(options = {}, keyNames = ['element-6066-11e4-a52e-4f735466cecf', 'element']) {
  for (const name of keyNames) {
    if (options[name]) {
      const result = _support.util.unwrapElement(options[name]);

      if (result) {
        return result;
      }
    }
  }

  return null;
}

function requireUuid(options = {}, keyNames = ['element-6066-11e4-a52e-4f735466cecf', 'element']) {
  const result = extractUuid(options, keyNames);

  if (!result) {
    throw new _baseDriver.errors.InvalidArgumentError(`${keyNames[0]} field is mandatory`);
  }

  return result;
}

commands.setValue = async function setValue(opts = {}) {
  const uuid = requireUuid(opts);
  const {
    value,
    text,
    keyModifierFlags
  } = opts;
  return null;
};

commands.click = async function click(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  return null;
};

commands.scroll = async function scroll(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    deltaX,
    deltaY,
    keyModifierFlags
  } = opts;
  return null;
};

commands.swipe = async function swipe(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    direction,
    velocity,
    keyModifierFlags
  } = opts;
  return null;
};

commands.rightClick = async function rightClick(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  return null;
};

commands.hover = async function hover(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  return null;
};

commands.doubleClick = async function doubleClick(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  return null;
};

commands.keys = async function keys(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    keys
  } = opts;
  return null;
};

commands.pressKeyCode = async function pressKeyCode(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    keycode,
    flags
  } = opts;
  return null;
};

commands.longPressKeyCode = async function longPressKeyCode(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    keycode,
    flags
  } = opts;
  return null;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZXN0dXJlcy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImV4dHJhY3RVdWlkIiwib3B0aW9ucyIsImtleU5hbWVzIiwibmFtZSIsInJlc3VsdCIsInV0aWwiLCJ1bndyYXBFbGVtZW50IiwicmVxdWlyZVV1aWQiLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsInNldFZhbHVlIiwib3B0cyIsInV1aWQiLCJ2YWx1ZSIsInRleHQiLCJrZXlNb2RpZmllckZsYWdzIiwiY2xpY2siLCJ4IiwieSIsInNjcm9sbCIsImRlbHRhWCIsImRlbHRhWSIsInN3aXBlIiwiZGlyZWN0aW9uIiwidmVsb2NpdHkiLCJyaWdodENsaWNrIiwiaG92ZXIiLCJkb3VibGVDbGljayIsImtleXMiLCJwcmVzc0tleUNvZGUiLCJrZXljb2RlIiwiZmxhZ3MiLCJsb25nUHJlc3NLZXlDb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7O0FBRUEsU0FBU0MsV0FBVCxDQUFzQkMsT0FBTyxHQUFHLEVBQWhDLEVBQW9DQyxRQUFRLEdBQUcsQ0FBQyxxQ0FBRCxFQUF3QyxTQUF4QyxDQUEvQyxFQUFtRztBQUNqRyxPQUFLLE1BQU1DLElBQVgsSUFBbUJELFFBQW5CLEVBQTZCO0FBQzNCLFFBQUlELE9BQU8sQ0FBQ0UsSUFBRCxDQUFYLEVBQW1CO0FBQ2pCLFlBQU1DLE1BQU0sR0FBR0MsY0FBS0MsYUFBTCxDQUFtQkwsT0FBTyxDQUFDRSxJQUFELENBQTFCLENBQWY7O0FBQ0EsVUFBSUMsTUFBSixFQUFZO0FBQ1YsZUFBT0EsTUFBUDtBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTRyxXQUFULENBQXNCTixPQUFPLEdBQUcsRUFBaEMsRUFBb0NDLFFBQVEsR0FBRyxDQUFDLHFDQUFELEVBQXdDLFNBQXhDLENBQS9DLEVBQW1HO0FBQ2pHLFFBQU1FLE1B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QztBQUM5QyxRQUFNQyxJQUFJLEdBQUdaLFdBQVcsQ0FBQ1csSUFBRCxDQUF4QjtBQUNBLFFBQU07QUFBRWlCLElBQUFBO0FBQUYsTUFBV2pCLElBQWpCO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FKRDs7QUFNQVosUUFBUSxDQUFDOEIsWUFBVCxHQUF3QixlQUFlQSxZQUFmLENBQTZCbEIsSUFBSSxHQUFHLEVBQXBDLEVBQXdDO0FBQzlELFFBQU1DLElBQUksR0FBR1osV0FBVyxDQUFDVyxJQUFELENBQXhCO0FBQ0EsUUFBTTtBQUFFbUIsSUFBQUEsT0FBRjtBQUFXQyxJQUFBQTtBQUFYLE1BQXFCcEIsSUFBM0I7QUFDQSxTQUFPLElBQVA7QUFDRCxDQUpEOztBQU1BWixRQUFRLENBQUNpQyxnQkFBVCxHQUE0QixlQUFlQSxnQkFBZixDQUFpQ3JCLElBQUksR0FBRyxFQUF4QyxFQUE0QztBQUN0RSxRQUFNQyxJQUFJLEdBQUdaLFdBQVcsQ0FBQ1csSUFBRCxDQUF4QjtBQUNBLFFBQU07QUFBRW1CLElBQUFBLE9BQUY7QUFBV0MsSUFBQUE7QUFBWCxNQUFxQnBCLElBQTNCO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FKRDs7ZUFNZVosUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmZ1bmN0aW9uIGV4dHJhY3RVdWlkIChvcHRpb25zID0ge30sIGtleU5hbWVzID0gWydlbGVtZW50LTYwNjYtMTFlNC1hNTJlLTRmNzM1NDY2Y2VjZicsICdlbGVtZW50J10pIHtcbiAgZm9yIChjb25zdCBuYW1lIG9mIGtleU5hbWVzKSB7XG4gICAgaWYgKG9wdGlvbnNbbmFtZV0pIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHV0aWwudW53cmFwRWxlbWVudChvcHRpb25zW25hbWVdKTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlcXVpcmVVdWlkIChvcHRpb25zID0ge30sIGtleU5hbWVzID0gWydlbGVtZW50LTYwNjYtMTFlNC1hNTJlLTRmNzM1NDY2Y2VjZicsICdlbGVtZW50J10pIHtcbiAgY29uc3QgcmVzdWx0ID0gZXh0cmFjdFV1aWQob3B0aW9ucywga2V5TmFtZXMpO1xuICBpZiAoIXJlc3VsdCkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYCR7a2V5TmFtZXNbMF19IGZpZWxkIGlzIG1hbmRhdG9yeWApO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmNvbW1hbmRzLnNldFZhbHVlID0gYXN5bmMgZnVuY3Rpb24gc2V0VmFsdWUgKG9wdHMgPSB7fSkge1xuICBjb25zdCB1dWlkID0gcmVxdWlyZVV1aWQob3B0cyk7XG4gIGNvbnN0IHsgdmFsdWUsIHRleHQsIGtleU1vZGlmaWVyRmxhZ3MgfSA9IG9wdHM7XG4gIHJldHVybiBudWxsO1xufTtcblxuY29tbWFuZHMuY2xpY2sgPSBhc3luYyBmdW5jdGlvbiBjbGljayAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHV1aWQgPSBleHRyYWN0VXVpZChvcHRzKTtcbiAgY29uc3QgeyB4LCB5LCBrZXlNb2RpZmllckZsYWdzIH0gPSBvcHRzO1xuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbW1hbmRzLnNjcm9sbCA9IGFzeW5jIGZ1bmN0aW9uIHNjcm9sbCAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHV1aWQgPSBleHRyYWN0VXVpZChvcHRzKTtcbiAgY29uc3Qge1xuICAgIHgsIHksXG4gICAgZGVsdGFYLCBkZWx0YVksXG4gICAga2V5TW9kaWZpZXJGbGFncyxcbiAgfSA9IG9wdHM7XG4gIHJldHVybiBudWxsO1xufTtcblxuY29tbWFuZHMuc3dpcGUgPSBhc3luYyBmdW5jdGlvbiBzd2lwZSAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHV1aWQgPSBleHRyYWN0VXVpZChvcHRzKTtcbiAgY29uc3Qge1xuICAgIHgsIHksXG4gICAgZGlyZWN0aW9uLFxuICAgIHZlbG9jaXR5LFxuICAgIGtleU1vZGlmaWVyRmxhZ3MsXG4gIH0gPSBvcHRzO1xuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbW1hbmRzLnJpZ2h0Q2xpY2sgPSBhc3luYyBmdW5jdGlvbiByaWdodENsaWNrIChvcHRzID0ge30pIHtcbiAgY29uc3QgdXVpZCA9IGV4dHJhY3RVdWlkKG9wdHMpO1xuICBjb25zdCB7IHgsIHksIGtleU1vZGlmaWVyRmxhZ3MgfSA9IG9wdHM7XG4gIHJldHVybiBudWxsO1xufTtcblxuY29tbWFuZHMuaG92ZXIgPSBhc3luYyBmdW5jdGlvbiBob3ZlciAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHV1aWQgPSBleHRyYWN0VXVpZChvcHRzKTtcbiAgY29uc3QgeyB4LCB5LCBrZXlNb2RpZmllckZsYWdzIH0gPSBvcHRzO1xuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbW1hbmRzLmRvdWJsZUNsaWNrID0gYXN5bmMgZnVuY3Rpb24gZG91YmxlQ2xpY2sgKG9wdHMgPSB7fSkge1xuICBjb25zdCB1dWlkID0gZXh0cmFjdFV1aWQob3B0cyk7XG4gIGNvbnN0IHsgeCwgeSwga2V5TW9kaWZpZXJGbGFncyB9ID0gb3B0cztcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb21tYW5kcy5rZXlzID0gYXN5bmMgZnVuY3Rpb24ga2V5cyAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHV1aWQgPSBleHRyYWN0VXVpZChvcHRzKTtcbiAgY29uc3QgeyBrZXlzIH0gPSBvcHRzO1xuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbW1hbmRzLnByZXNzS2V5Q29kZSA9IGFzeW5jIGZ1bmN0aW9uIHByZXNzS2V5Q29kZSAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHV1aWQgPSBleHRyYWN0VXVpZChvcHRzKTtcbiAgY29uc3QgeyBrZXljb2RlLCBmbGFncyB9ID0gb3B0cztcbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbW1hbmRzLmxvbmdQcmVzc0tleUNvZGUgPSBhc3luYyBmdW5jdGlvbiBsb25nUHJlc3NLZXlDb2RlIChvcHRzID0ge30pIHtcbiAgY29uc3QgdXVpZCA9IGV4dHJhY3RVdWlkKG9wdHMpO1xuICBjb25zdCB7IGtleWNvZGUsIGZsYWdzIH0gPSBvcHRzO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9nZXN0dXJlcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
