"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _webdriverio = require("webdriverio");

var _server = require("../../lib/server");

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _chai = _interopRequireDefault(require("chai"));

var _utils = require("../utils");

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

const CAPS = {
  platformName: 'Linux',
  automationName: 'atspi2',
  appName: _utils.APP_NAME
};
describe('AtSpi2Driver - find elements', function () {
  this.timeout(_utils.MOCHA_TIMEOUT);
  let server;
  let driver;
  before(async function () {
    server = await (0, _server.startServer)(_utils.PORT, _utils.HOST);
  });
  after(async function () {
    if (server) {
      await server.close();
      server = null;
    }
  });
  beforeEach(async function () {
    driver = await (0, _webdriverio.remote)({
      hostname: _utils.HOST,
      port: _utils.PORT,
      capabilities: CAPS
    });
  });
  afterEach(async function () {
    if (driver) {
      try {
        await driver.deleteSession();
      } finally {
        driver = null;
      }
    }
  });
  it('should find by name', async function () {
    const el = await driver.findElement('name', 'Find');
    el.should.exist;
  });
  it('should find multiple by name', async function () {
    const els = await driver.findElements('name', 'Find');
    els.length.should.eql(1);
    await driver.getElementAttribute(els[0], 'name').should.eventually.eql('Find');
  });
  it('should find by xpath', async function () {
    const el = await driver.findElement('xpath', '//toggle-button[@name="Find"]');
    el.should.exist;
  });
  it('should find multiple by xpath', async function () {
    const els = await driver.findElements('xpath', '//toggle-button[@name="Find"]');
    els.length.should.be.above(1);
    await driver.getElementAttribute(els[0], 'name').should.eventually.eql('Find');
  });
  it('should find subelements', async function () {
    const el = await driver.findElement('xpath', '//document-web');
    el.should.exist;
    const subEls = await driver.findElementsFromElement(el, 'xpath', '//image[@name="Ubuntu Logo"]');
    subEls.length.should.be.above(1);
    await driver.getElementAttribute(subEls[0], 'tag').should.eventually.eql('img');
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9maW5kLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwic2hvdWxkIiwidXNlIiwiY2hhaUFzUHJvbWlzZWQiLCJDQVBTIiwicGxhdGZvcm1OYW1lIiwiYXV0b21hdGlvbk5hbWUiLCJhcHBOYW1lIiwiQVBQX05BTUUiLCJkZXNjcmliZSIsInRpbWVvdXQiLCJNT0NIQV9USU1FT1VUIiwic2VydmVyIiwiZHJpdmVyIiwiYmVmb3JlIiwiUE9SVCIsIkhPU1QiLCJhZnRlciIsImNsb3NlIiwiYmVmb3JlRWFjaCIsImhvc3RuYW1lIiwicG9ydCIsImNhcGFiaWxpdGllcyIsImFmdGVyRWFjaCIsImRlbGV0ZVNlc3Npb24iLCJpdCIsImVsIiwiZmluZEVsZW1lbnQiLCJleGlzdCIsImVscyIsImZpbmRFbGVtZW50cyIsImxlbmd0aCIsImVxbCIsImdldEVsZW1lbnRBdHRyaWJ1dGUiLCJldmVudHVhbGx5IiwiYmUiLCJhYm92ZSIsInN1YkVscyIsImZpbmRFbGVtZW50c0Zyb21FbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsY0FBS0MsTUFBTDs7QUFDQUQsY0FBS0UsR0FBTCxDQUFTQyx1QkFBVDs7QUFFQSxNQUFNQyxJQUFJLEdBQUc7QUFDWEMsRUFBQUEsWUFBWSxFQUFFLE9BREg7QUFFWEMsRUFBQUEsY0FBYyxFQUFFLFFBRkw7QUFHWEMsRUFBQUEsT0FBTyxFQUFFQztBQUhFLENBQWI7QUFNQUMsUUFBUSxDQUFDLDhCQUFELEVBQWlDLFlBQVk7QUFDbkQsT0FBS0MsT0FBTCxDQUFhQyxvQkFBYjtBQUVBLE1BQUlDLE1BQUo7QUFDQSxNQUFJQyxNQUFKO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQyxrQkFBa0I7QUFDdkJGLElBQUFBLE1BQU0sR0FBRyxNQUFNLHlCQUFZRyxXQUFaLEVBQWtCQyxXQUFsQixDQUFmO0FBQ0QsR0FGSyxDQUFOO0FBR0FDLEVBQUFB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QUFNLENBQUNvQixtQkFBUCxDQUEyQkksTUFBTSxDQUFDLENBQUQsQ0FBakMsRUFBc0MsS0FBdEMsRUFBNkNwQyxNQUE3QyxDQUFvRGlDLFVBQXBELENBQStERixHQUEvRCxDQUFtRSxLQUFuRSxDQUFOO0FBQ0QsR0FOQyxDQUFGO0FBUUQsQ0FuRU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyByZW1vdGUgfSBmcm9tICd3ZWJkcml2ZXJpbyc7XG5pbXBvcnQgeyBzdGFydFNlcnZlciB9IGZyb20gJy4uLy4uL2xpYi9zZXJ2ZXInO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBIT1NULCBQT1JULCBNT0NIQV9USU1FT1VULCBBUFBfTkFNRSB9IGZyb20gJy4uL3V0aWxzJztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuY29uc3QgQ0FQUyA9IHtcbiAgcGxhdGZvcm1OYW1lOiAnTGludXgnLFxuICBhdXRvbWF0aW9uTmFtZTogJ2F0c3BpMicsXG4gIGFwcE5hbWU6IEFQUF9OQU1FXG59O1xuXG5kZXNjcmliZSgnQXRTcGkyRHJpdmVyIC0gZmluZCBlbGVtZW50cycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KE1PQ0hBX1RJTUVPVVQpO1xuXG4gIGxldCBzZXJ2ZXI7XG4gIGxldCBkcml2ZXI7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgc2VydmVyID0gYXdhaXQgc3RhcnRTZXJ2ZXIoUE9SVCwgSE9TVCk7XG4gIH0pO1xuICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNlcnZlcikge1xuICAgICAgYXdhaXQgc2VydmVyLmNsb3NlKCk7XG4gICAgICBzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfSk7XG4gIGJlZm9yZUVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGRyaXZlciA9IGF3YWl0IHJlbW90ZSh7XG4gICAgICBob3N0bmFtZTogSE9TVCxcbiAgICAgIHBvcnQ6IFBPUlQsXG4gICAgICBjYXBhYmlsaXRpZXM6IENBUFMsXG4gICAgfSk7XG4gIH0pO1xuICBhZnRlckVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGlmIChkcml2ZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkcml2ZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmaW5kIGJ5IG5hbWUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ25hbWUnLCAnRmluZCcpO1xuICAgIGVsLnNob3VsZC5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmaW5kIG11bHRpcGxlIGJ5IG5hbWUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWxzID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50cygnbmFtZScsICdGaW5kJyk7XG4gICAgZWxzLmxlbmd0aC5zaG91bGQuZXFsKDEpO1xuICAgIGF3YWl0IGRyaXZlci5nZXRFbGVtZW50QXR0cmlidXRlKGVsc1swXSwgJ25hbWUnKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJ0ZpbmQnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmaW5kIGJ5IHhwYXRoJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KFxuICAgICAgJ3hwYXRoJyxcbiAgICAgICcvL3RvZ2dsZS1idXR0b25bQG5hbWU9XCJGaW5kXCJdJ1xuICAgICk7XG4gICAgZWwuc2hvdWxkLmV4aXN0O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGZpbmQgbXVsdGlwbGUgYnkgeHBhdGgnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWxzID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50cyhcbiAgICAgICd4cGF0aCcsXG4gICAgICAnLy90b2dnbGUtYnV0dG9uW0BuYW1lPVwiRmluZFwiXSdcbiAgICApO1xuICAgIGVscy5sZW5ndGguc2hvdWxkLmJlLmFib3ZlKDEpO1xuICAgIGF3YWl0IGRyaXZlci5nZXRFbGVtZW50QXR0cmlidXRlKGVsc1swXSwgJ25hbWUnKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJ0ZpbmQnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmaW5kIHN1YmVsZW1lbnRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCd4cGF0aCcsICcvL2RvY3VtZW50LXdlYicpO1xuICAgIGVsLnNob3VsZC5leGlzdDtcbiAgICBjb25zdCBzdWJFbHMgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnRzRnJvbUVsZW1lbnQoZWwsICd4cGF0aCcsICcvL2ltYWdlW0BuYW1lPVwiVWJ1bnR1IExvZ29cIl0nKTtcbiAgICBzdWJFbHMubGVuZ3RoLnNob3VsZC5iZS5hYm92ZSgxKTtcbiAgICBhd2FpdCBkcml2ZXIuZ2V0RWxlbWVudEF0dHJpYnV0ZShzdWJFbHNbMF0sICd0YWcnKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJ2ltZycpO1xuICB9KTtcblxufSk7XG5cbiJdLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2ZpbmQtZTJlLXNwZWNzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
